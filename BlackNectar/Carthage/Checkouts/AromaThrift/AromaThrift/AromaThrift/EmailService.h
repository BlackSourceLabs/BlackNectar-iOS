/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Aroma.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Email.h"
#import "Exceptions.h"

typedef Aroma_int EmailService_int;

typedef Aroma_long EmailService_long;

typedef Aroma_timestamp EmailService_timestamp;

typedef Aroma_uuid EmailService_uuid;

typedef AromaAuthentication_AuthenticationToken * EmailService_AuthenticationToken;

typedef Aroma_Application * EmailService_Application;

typedef int EmailService_Urgency;

typedef Aroma_User * EmailService_User;

typedef AromaChannels_AromaChannel * EmailService_AromaChannel;

typedef AromaEmail_EmailMessage * EmailService_EmailMessage;

typedef AromaException_AccountAlreadyExistsException * EmailService_AccountAlreadyExistsException;

typedef AromaException_InvalidArgumentException * EmailService_InvalidArgumentException;

typedef AromaException_InvalidCredentialsException * EmailService_InvalidCredentialsException;

typedef AromaException_InvalidTokenException * EmailService_InvalidTokenException;

typedef AromaException_OperationFailedException * EmailService_OperationFailedException;

typedef AromaException_ApplicationAlreadyRegisteredException * EmailService_ApplicationAlreadyRegisteredException;

typedef AromaException_ApplicationDoesNotExistException * EmailService_ApplicationDoesNotExistException;

typedef AromaException_CustomChannelUnreachableException * EmailService_CustomChannelUnreachableException;

typedef AromaException_ChannelDoesNotExistException * EmailService_ChannelDoesNotExistException;

typedef AromaException_UnauthorizedException * EmailService_UnauthorizedException;

@interface EmailService_SendEmailRequest : NSObject <TBase, NSCoding> {
  EmailService_AuthenticationToken __token;
  NSString * __emailAddress;
  EmailService_EmailMessage __emailMessage;

  BOOL __token_isset;
  BOOL __emailAddress_isset;
  BOOL __emailMessage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) EmailService_AuthenticationToken token;
@property (nonatomic, retain, getter=emailAddress, setter=setEmailAddress:) NSString * emailAddress;
@property (nonatomic, retain, getter=emailMessage, setter=setEmailMessage:) EmailService_EmailMessage emailMessage;
#endif

- (id) init;
- (id) initWithToken: (EmailService_AuthenticationToken) token emailAddress: (NSString *) emailAddress emailMessage: (EmailService_EmailMessage) emailMessage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EmailService_AuthenticationToken) token;
- (void) setToken: (EmailService_AuthenticationToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) emailAddress;
- (void) setEmailAddress: (NSString *) emailAddress;
#endif
- (BOOL) emailAddressIsSet;

#if !__has_feature(objc_arc)
- (EmailService_EmailMessage) emailMessage;
- (void) setEmailMessage: (EmailService_EmailMessage) emailMessage;
#endif
- (BOOL) emailMessageIsSet;

@end

@interface EmailService_SendEmailResponse : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@protocol EmailService_EmailService <NSObject>
- (double) getApiVersion;  // throws TException
- (EmailService_SendEmailResponse *) sendEmail: (EmailService_SendEmailRequest *) request;  // throws EmailService_InvalidArgumentException, EmailService_OperationFailedException, EmailService_InvalidTokenException, TException
@end

@interface EmailService_EmailServiceClient : TBaseClient <EmailService_EmailService> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface EmailService_EmailServiceProcessor : NSObject <TProcessor> {
  id <EmailService_EmailService> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithEmailService: (id <EmailService_EmailService>) service;
- (id<EmailService_EmailService>) service;
@end

@interface EmailService_EmailServiceConstants : NSObject {
}
+ (EmailService_int) SERVICE_PORT;
+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT;
+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT;
+ (NSString *) AROMA_EMAIL_ADDRESS;
@end

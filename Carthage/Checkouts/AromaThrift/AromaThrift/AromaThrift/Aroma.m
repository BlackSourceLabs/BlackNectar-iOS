/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "Aroma.h"

@implementation Aroma_LengthOfTime

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUnit: (int) unit value: (Aroma_long) value
{
  self = [super init];
  __unit = unit;
  __unit_isset = YES;
  __value = value;
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [decoder decodeIntForKey: @"unit"];
    __unit_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [decoder decodeInt64ForKey: @"value"];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__unit_isset)
  {
    [encoder encodeInt: __unit forKey: @"unit"];
  }
  if (__value_isset)
  {
    [encoder encodeInt64: __value forKey: @"value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [@(__unit) hash];
  }
  hash = (hash * 31) ^ __value_isset ? 2654435761 : 0;
  if (__value_isset)
  {
    hash = (hash * 31) ^ [@(__value) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_LengthOfTime class]]) {
    return NO;
  }
  Aroma_LengthOfTime *other = (Aroma_LengthOfTime *)anObject;
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && (__unit != other->__unit))) {
    return NO;
  }
  if ((__value_isset != other->__value_isset) ||
      (__value_isset && (__value != other->__value))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) unit {
  return __unit;
}

- (void) setUnit: (int) unit {
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  __unit_isset = NO;
}

- (int64_t) value {
  return __value;
}

- (void) setValue: (int64_t) value {
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LengthOfTime"];
  if (__unit_isset) {
    [outProtocol writeFieldBeginWithName: @"unit" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __unit];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    [outProtocol writeFieldBeginWithName: @"value" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__unit_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'unit' is not set."];
  }
  if (!__value_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'value' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_LengthOfTime("];
  [ms appendString: @"unit:"];
  [ms appendFormat: @"%i", __unit];
  [ms appendString: @",value:"];
  [ms appendFormat: @"%qi", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Dimension

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithWidth: (Aroma_int) width height: (Aroma_int) height
{
  self = [super init];
  __width = width;
  __width_isset = YES;
  __height = height;
  __height_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __width_isset ? 2654435761 : 0;
  if (__width_isset)
  {
    hash = (hash * 31) ^ [@(__width) hash];
  }
  hash = (hash * 31) ^ __height_isset ? 2654435761 : 0;
  if (__height_isset)
  {
    hash = (hash * 31) ^ [@(__height) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Dimension class]]) {
    return NO;
  }
  Aroma_Dimension *other = (Aroma_Dimension *)anObject;
  if ((__width_isset != other->__width_isset) ||
      (__width_isset && (__width != other->__width))) {
    return NO;
  }
  if ((__height_isset != other->__height_isset) ||
      (__height_isset && (__height != other->__height))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Dimension"];
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__width_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'width' is not set."];
  }
  if (!__height_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'height' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Dimension("];
  [ms appendString: @"width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Image

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithImageType: (int) imageType data: (NSData *) data dimension: (Aroma_Dimension *) dimension
{
  self = [super init];
  __imageType = imageType;
  __imageType_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  __dimension = [dimension retain_stub];
  __dimension_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"imageType"])
  {
    __imageType = [decoder decodeIntForKey: @"imageType"];
    __imageType_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"dimension"])
  {
    __dimension = [[decoder decodeObjectForKey: @"dimension"] retain_stub];
    __dimension_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__imageType_isset)
  {
    [encoder encodeInt: __imageType forKey: @"imageType"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__dimension_isset)
  {
    [encoder encodeObject: __dimension forKey: @"dimension"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __imageType_isset ? 2654435761 : 0;
  if (__imageType_isset)
  {
    hash = (hash * 31) ^ [@(__imageType) hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __dimension_isset ? 2654435761 : 0;
  if (__dimension_isset)
  {
    hash = (hash * 31) ^ [__dimension hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Image class]]) {
    return NO;
  }
  Aroma_Image *other = (Aroma_Image *)anObject;
  if ((__imageType_isset != other->__imageType_isset) ||
      (__imageType_isset && (__imageType != other->__imageType))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__dimension_isset != other->__dimension_isset) ||
      (__dimension_isset && ((__dimension || other->__dimension) && ![__dimension isEqual:other->__dimension]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [__dimension release_stub];
  [super dealloc_stub];
}

- (int) imageType {
  return __imageType;
}

- (void) setImageType: (int) imageType {
  __imageType = imageType;
  __imageType_isset = YES;
}

- (BOOL) imageTypeIsSet {
  return __imageType_isset;
}

- (void) unsetImageType {
  __imageType_isset = NO;
}

- (NSData *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSData *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (Aroma_Dimension *) dimension {
  return [[__dimension retain_stub] autorelease_stub];
}

- (void) setDimension: (Aroma_Dimension *) dimension {
  [dimension retain_stub];
  [__dimension release_stub];
  __dimension = dimension;
  __dimension_isset = YES;
}

- (BOOL) dimensionIsSet {
  return __dimension_isset;
}

- (void) unsetDimension {
  [__dimension release_stub];
  __dimension = nil;
  __dimension_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setImageType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Aroma_Dimension *fieldValue = [[Aroma_Dimension alloc] init];
          [fieldValue read: inProtocol];
          [self setDimension: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Image"];
  if (__imageType_isset) {
    [outProtocol writeFieldBeginWithName: @"imageType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __imageType];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __data];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dimension_isset) {
    if (__dimension != nil) {
      [outProtocol writeFieldBeginWithName: @"dimension" type: TType_STRUCT fieldID: 3];
      [__dimension write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Image("];
  [ms appendString: @"imageType:"];
  [ms appendFormat: @"%i", __imageType];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @",dimension:"];
  [ms appendFormat: @"%@", __dimension];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Message

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.urgency = 1;

  self.isTruncated = NO;

#endif
  return self;
}

- (id) initWithMessageId: (Aroma_uuid) messageId body: (NSString *) body urgency: (int) urgency timeOfCreation: (Aroma_timestamp) timeOfCreation timeMessageReceived: (Aroma_timestamp) timeMessageReceived applicationName: (NSString *) applicationName hostname: (NSString *) hostname macAddress: (NSString *) macAddress isTruncated: (BOOL) isTruncated title: (NSString *) title applicationId: (Aroma_uuid) applicationId deviceName: (NSString *) deviceName
{
  self = [super init];
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  __urgency = urgency;
  __urgency_isset = YES;
  __timeOfCreation = timeOfCreation;
  __timeOfCreation_isset = YES;
  __timeMessageReceived = timeMessageReceived;
  __timeMessageReceived_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __hostname = [hostname retain_stub];
  __hostname_isset = YES;
  __macAddress = [macAddress retain_stub];
  __macAddress_isset = YES;
  __isTruncated = isTruncated;
  __isTruncated_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __deviceName = [deviceName retain_stub];
  __deviceName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"urgency"])
  {
    __urgency = [decoder decodeIntForKey: @"urgency"];
    __urgency_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfCreation"])
  {
    __timeOfCreation = [decoder decodeInt64ForKey: @"timeOfCreation"];
    __timeOfCreation_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeMessageReceived"])
  {
    __timeMessageReceived = [decoder decodeInt64ForKey: @"timeMessageReceived"];
    __timeMessageReceived_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hostname"])
  {
    __hostname = [[decoder decodeObjectForKey: @"hostname"] retain_stub];
    __hostname_isset = YES;
  }
  if ([decoder containsValueForKey: @"macAddress"])
  {
    __macAddress = [[decoder decodeObjectForKey: @"macAddress"] retain_stub];
    __macAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"isTruncated"])
  {
    __isTruncated = [decoder decodeBoolForKey: @"isTruncated"];
    __isTruncated_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceName"])
  {
    __deviceName = [[decoder decodeObjectForKey: @"deviceName"] retain_stub];
    __deviceName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__urgency_isset)
  {
    [encoder encodeInt: __urgency forKey: @"urgency"];
  }
  if (__timeOfCreation_isset)
  {
    [encoder encodeInt64: __timeOfCreation forKey: @"timeOfCreation"];
  }
  if (__timeMessageReceived_isset)
  {
    [encoder encodeInt64: __timeMessageReceived forKey: @"timeMessageReceived"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__hostname_isset)
  {
    [encoder encodeObject: __hostname forKey: @"hostname"];
  }
  if (__macAddress_isset)
  {
    [encoder encodeObject: __macAddress forKey: @"macAddress"];
  }
  if (__isTruncated_isset)
  {
    [encoder encodeBool: __isTruncated forKey: @"isTruncated"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__deviceName_isset)
  {
    [encoder encodeObject: __deviceName forKey: @"deviceName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __urgency_isset ? 2654435761 : 0;
  if (__urgency_isset)
  {
    hash = (hash * 31) ^ [@(__urgency) hash];
  }
  hash = (hash * 31) ^ __timeOfCreation_isset ? 2654435761 : 0;
  if (__timeOfCreation_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfCreation) hash];
  }
  hash = (hash * 31) ^ __timeMessageReceived_isset ? 2654435761 : 0;
  if (__timeMessageReceived_isset)
  {
    hash = (hash * 31) ^ [@(__timeMessageReceived) hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __hostname_isset ? 2654435761 : 0;
  if (__hostname_isset)
  {
    hash = (hash * 31) ^ [__hostname hash];
  }
  hash = (hash * 31) ^ __macAddress_isset ? 2654435761 : 0;
  if (__macAddress_isset)
  {
    hash = (hash * 31) ^ [__macAddress hash];
  }
  hash = (hash * 31) ^ __isTruncated_isset ? 2654435761 : 0;
  if (__isTruncated_isset)
  {
    hash = (hash * 31) ^ [@(__isTruncated) hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __deviceName_isset ? 2654435761 : 0;
  if (__deviceName_isset)
  {
    hash = (hash * 31) ^ [__deviceName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Message class]]) {
    return NO;
  }
  Aroma_Message *other = (Aroma_Message *)anObject;
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__urgency_isset != other->__urgency_isset) ||
      (__urgency_isset && (__urgency != other->__urgency))) {
    return NO;
  }
  if ((__timeOfCreation_isset != other->__timeOfCreation_isset) ||
      (__timeOfCreation_isset && (__timeOfCreation != other->__timeOfCreation))) {
    return NO;
  }
  if ((__timeMessageReceived_isset != other->__timeMessageReceived_isset) ||
      (__timeMessageReceived_isset && (__timeMessageReceived != other->__timeMessageReceived))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__hostname_isset != other->__hostname_isset) ||
      (__hostname_isset && ((__hostname || other->__hostname) && ![__hostname isEqual:other->__hostname]))) {
    return NO;
  }
  if ((__macAddress_isset != other->__macAddress_isset) ||
      (__macAddress_isset && ((__macAddress || other->__macAddress) && ![__macAddress isEqual:other->__macAddress]))) {
    return NO;
  }
  if ((__isTruncated_isset != other->__isTruncated_isset) ||
      (__isTruncated_isset && (__isTruncated != other->__isTruncated))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__deviceName_isset != other->__deviceName_isset) ||
      (__deviceName_isset && ((__deviceName || other->__deviceName) && ![__deviceName isEqual:other->__deviceName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__messageId release_stub];
  [__body release_stub];
  [__applicationName release_stub];
  [__hostname release_stub];
  [__macAddress release_stub];
  [__title release_stub];
  [__applicationId release_stub];
  [__deviceName release_stub];
  [super dealloc_stub];
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (int) urgency {
  return __urgency;
}

- (void) setUrgency: (int) urgency {
  __urgency = urgency;
  __urgency_isset = YES;
}

- (BOOL) urgencyIsSet {
  return __urgency_isset;
}

- (void) unsetUrgency {
  __urgency_isset = NO;
}

- (int64_t) timeOfCreation {
  return __timeOfCreation;
}

- (void) setTimeOfCreation: (int64_t) timeOfCreation {
  __timeOfCreation = timeOfCreation;
  __timeOfCreation_isset = YES;
}

- (BOOL) timeOfCreationIsSet {
  return __timeOfCreation_isset;
}

- (void) unsetTimeOfCreation {
  __timeOfCreation_isset = NO;
}

- (int64_t) timeMessageReceived {
  return __timeMessageReceived;
}

- (void) setTimeMessageReceived: (int64_t) timeMessageReceived {
  __timeMessageReceived = timeMessageReceived;
  __timeMessageReceived_isset = YES;
}

- (BOOL) timeMessageReceivedIsSet {
  return __timeMessageReceived_isset;
}

- (void) unsetTimeMessageReceived {
  __timeMessageReceived_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (NSString *) hostname {
  return [[__hostname retain_stub] autorelease_stub];
}

- (void) setHostname: (NSString *) hostname {
  [hostname retain_stub];
  [__hostname release_stub];
  __hostname = hostname;
  __hostname_isset = YES;
}

- (BOOL) hostnameIsSet {
  return __hostname_isset;
}

- (void) unsetHostname {
  [__hostname release_stub];
  __hostname = nil;
  __hostname_isset = NO;
}

- (NSString *) macAddress {
  return [[__macAddress retain_stub] autorelease_stub];
}

- (void) setMacAddress: (NSString *) macAddress {
  [macAddress retain_stub];
  [__macAddress release_stub];
  __macAddress = macAddress;
  __macAddress_isset = YES;
}

- (BOOL) macAddressIsSet {
  return __macAddress_isset;
}

- (void) unsetMacAddress {
  [__macAddress release_stub];
  __macAddress = nil;
  __macAddress_isset = NO;
}

- (BOOL) isTruncated {
  return __isTruncated;
}

- (void) setIsTruncated: (BOOL) isTruncated {
  __isTruncated = isTruncated;
  __isTruncated_isset = YES;
}

- (BOOL) isTruncatedIsSet {
  return __isTruncated_isset;
}

- (void) unsetIsTruncated {
  __isTruncated_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) deviceName {
  return [[__deviceName retain_stub] autorelease_stub];
}

- (void) setDeviceName: (NSString *) deviceName {
  [deviceName retain_stub];
  [__deviceName release_stub];
  __deviceName = deviceName;
  __deviceName_isset = YES;
}

- (BOOL) deviceNameIsSet {
  return __deviceName_isset;
}

- (void) unsetDeviceName {
  [__deviceName release_stub];
  __deviceName = nil;
  __deviceName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUrgency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfCreation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeMessageReceived: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHostname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMacAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsTruncated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Message"];
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urgency_isset) {
    [outProtocol writeFieldBeginWithName: @"urgency" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __urgency];
    [outProtocol writeFieldEnd];
  }
  if (__timeOfCreation_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfCreation" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __timeOfCreation];
    [outProtocol writeFieldEnd];
  }
  if (__timeMessageReceived_isset) {
    [outProtocol writeFieldBeginWithName: @"timeMessageReceived" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __timeMessageReceived];
    [outProtocol writeFieldEnd];
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hostname_isset) {
    if (__hostname != nil) {
      [outProtocol writeFieldBeginWithName: @"hostname" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __hostname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__macAddress_isset) {
    if (__macAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"macAddress" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __macAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isTruncated_isset) {
    [outProtocol writeFieldBeginWithName: @"isTruncated" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __isTruncated];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceName_isset) {
    if (__deviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceName" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __deviceName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Message("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",urgency:"];
  [ms appendFormat: @"%i", __urgency];
  [ms appendString: @",timeOfCreation:"];
  [ms appendFormat: @"%qi", __timeOfCreation];
  [ms appendString: @",timeMessageReceived:"];
  [ms appendFormat: @"%qi", __timeMessageReceived];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",hostname:"];
  [ms appendFormat: @"\"%@\"", __hostname];
  [ms appendString: @",macAddress:"];
  [ms appendFormat: @"\"%@\"", __macAddress];
  [ms appendString: @",isTruncated:"];
  [ms appendFormat: @"%i", __isTruncated];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", __deviceName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Organization

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.tier = 1;

#endif
  return self;
}

- (id) initWithOrganizationId: (Aroma_uuid) organizationId organizationName: (NSString *) organizationName website: (NSString *) website logo: (Aroma_Image *) logo techStack: (NSString *) techStack owners: (NSMutableArray *) owners organizationEmail: (NSString *) organizationEmail stockMarketSymbol: (NSString *) stockMarketSymbol logoLink: (NSString *) logoLink industry: (int) industry tier: (int) tier organizationDescription: (NSString *) organizationDescription githubProfile: (NSString *) githubProfile
{
  self = [super init];
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  __organizationName = [organizationName retain_stub];
  __organizationName_isset = YES;
  __website = [website retain_stub];
  __website_isset = YES;
  __logo = [logo retain_stub];
  __logo_isset = YES;
  __techStack = [techStack retain_stub];
  __techStack_isset = YES;
  __owners = [owners retain_stub];
  __owners_isset = YES;
  __organizationEmail = [organizationEmail retain_stub];
  __organizationEmail_isset = YES;
  __stockMarketSymbol = [stockMarketSymbol retain_stub];
  __stockMarketSymbol_isset = YES;
  __logoLink = [logoLink retain_stub];
  __logoLink_isset = YES;
  __industry = industry;
  __industry_isset = YES;
  __tier = tier;
  __tier_isset = YES;
  __organizationDescription = [organizationDescription retain_stub];
  __organizationDescription_isset = YES;
  __githubProfile = [githubProfile retain_stub];
  __githubProfile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationName"])
  {
    __organizationName = [[decoder decodeObjectForKey: @"organizationName"] retain_stub];
    __organizationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"website"])
  {
    __website = [[decoder decodeObjectForKey: @"website"] retain_stub];
    __website_isset = YES;
  }
  if ([decoder containsValueForKey: @"logo"])
  {
    __logo = [[decoder decodeObjectForKey: @"logo"] retain_stub];
    __logo_isset = YES;
  }
  if ([decoder containsValueForKey: @"techStack"])
  {
    __techStack = [[decoder decodeObjectForKey: @"techStack"] retain_stub];
    __techStack_isset = YES;
  }
  if ([decoder containsValueForKey: @"owners"])
  {
    __owners = [[decoder decodeObjectForKey: @"owners"] retain_stub];
    __owners_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationEmail"])
  {
    __organizationEmail = [[decoder decodeObjectForKey: @"organizationEmail"] retain_stub];
    __organizationEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"stockMarketSymbol"])
  {
    __stockMarketSymbol = [[decoder decodeObjectForKey: @"stockMarketSymbol"] retain_stub];
    __stockMarketSymbol_isset = YES;
  }
  if ([decoder containsValueForKey: @"logoLink"])
  {
    __logoLink = [[decoder decodeObjectForKey: @"logoLink"] retain_stub];
    __logoLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"industry"])
  {
    __industry = [decoder decodeIntForKey: @"industry"];
    __industry_isset = YES;
  }
  if ([decoder containsValueForKey: @"tier"])
  {
    __tier = [decoder decodeIntForKey: @"tier"];
    __tier_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationDescription"])
  {
    __organizationDescription = [[decoder decodeObjectForKey: @"organizationDescription"] retain_stub];
    __organizationDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"githubProfile"])
  {
    __githubProfile = [[decoder decodeObjectForKey: @"githubProfile"] retain_stub];
    __githubProfile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
  if (__organizationName_isset)
  {
    [encoder encodeObject: __organizationName forKey: @"organizationName"];
  }
  if (__website_isset)
  {
    [encoder encodeObject: __website forKey: @"website"];
  }
  if (__logo_isset)
  {
    [encoder encodeObject: __logo forKey: @"logo"];
  }
  if (__techStack_isset)
  {
    [encoder encodeObject: __techStack forKey: @"techStack"];
  }
  if (__owners_isset)
  {
    [encoder encodeObject: __owners forKey: @"owners"];
  }
  if (__organizationEmail_isset)
  {
    [encoder encodeObject: __organizationEmail forKey: @"organizationEmail"];
  }
  if (__stockMarketSymbol_isset)
  {
    [encoder encodeObject: __stockMarketSymbol forKey: @"stockMarketSymbol"];
  }
  if (__logoLink_isset)
  {
    [encoder encodeObject: __logoLink forKey: @"logoLink"];
  }
  if (__industry_isset)
  {
    [encoder encodeInt: __industry forKey: @"industry"];
  }
  if (__tier_isset)
  {
    [encoder encodeInt: __tier forKey: @"tier"];
  }
  if (__organizationDescription_isset)
  {
    [encoder encodeObject: __organizationDescription forKey: @"organizationDescription"];
  }
  if (__githubProfile_isset)
  {
    [encoder encodeObject: __githubProfile forKey: @"githubProfile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  hash = (hash * 31) ^ __organizationName_isset ? 2654435761 : 0;
  if (__organizationName_isset)
  {
    hash = (hash * 31) ^ [__organizationName hash];
  }
  hash = (hash * 31) ^ __website_isset ? 2654435761 : 0;
  if (__website_isset)
  {
    hash = (hash * 31) ^ [__website hash];
  }
  hash = (hash * 31) ^ __logo_isset ? 2654435761 : 0;
  if (__logo_isset)
  {
    hash = (hash * 31) ^ [__logo hash];
  }
  hash = (hash * 31) ^ __techStack_isset ? 2654435761 : 0;
  if (__techStack_isset)
  {
    hash = (hash * 31) ^ [__techStack hash];
  }
  hash = (hash * 31) ^ __owners_isset ? 2654435761 : 0;
  if (__owners_isset)
  {
    hash = (hash * 31) ^ [__owners hash];
  }
  hash = (hash * 31) ^ __organizationEmail_isset ? 2654435761 : 0;
  if (__organizationEmail_isset)
  {
    hash = (hash * 31) ^ [__organizationEmail hash];
  }
  hash = (hash * 31) ^ __stockMarketSymbol_isset ? 2654435761 : 0;
  if (__stockMarketSymbol_isset)
  {
    hash = (hash * 31) ^ [__stockMarketSymbol hash];
  }
  hash = (hash * 31) ^ __logoLink_isset ? 2654435761 : 0;
  if (__logoLink_isset)
  {
    hash = (hash * 31) ^ [__logoLink hash];
  }
  hash = (hash * 31) ^ __industry_isset ? 2654435761 : 0;
  if (__industry_isset)
  {
    hash = (hash * 31) ^ [@(__industry) hash];
  }
  hash = (hash * 31) ^ __tier_isset ? 2654435761 : 0;
  if (__tier_isset)
  {
    hash = (hash * 31) ^ [@(__tier) hash];
  }
  hash = (hash * 31) ^ __organizationDescription_isset ? 2654435761 : 0;
  if (__organizationDescription_isset)
  {
    hash = (hash * 31) ^ [__organizationDescription hash];
  }
  hash = (hash * 31) ^ __githubProfile_isset ? 2654435761 : 0;
  if (__githubProfile_isset)
  {
    hash = (hash * 31) ^ [__githubProfile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Organization class]]) {
    return NO;
  }
  Aroma_Organization *other = (Aroma_Organization *)anObject;
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  if ((__organizationName_isset != other->__organizationName_isset) ||
      (__organizationName_isset && ((__organizationName || other->__organizationName) && ![__organizationName isEqual:other->__organizationName]))) {
    return NO;
  }
  if ((__website_isset != other->__website_isset) ||
      (__website_isset && ((__website || other->__website) && ![__website isEqual:other->__website]))) {
    return NO;
  }
  if ((__logo_isset != other->__logo_isset) ||
      (__logo_isset && ((__logo || other->__logo) && ![__logo isEqual:other->__logo]))) {
    return NO;
  }
  if ((__techStack_isset != other->__techStack_isset) ||
      (__techStack_isset && ((__techStack || other->__techStack) && ![__techStack isEqual:other->__techStack]))) {
    return NO;
  }
  if ((__owners_isset != other->__owners_isset) ||
      (__owners_isset && ((__owners || other->__owners) && ![__owners isEqual:other->__owners]))) {
    return NO;
  }
  if ((__organizationEmail_isset != other->__organizationEmail_isset) ||
      (__organizationEmail_isset && ((__organizationEmail || other->__organizationEmail) && ![__organizationEmail isEqual:other->__organizationEmail]))) {
    return NO;
  }
  if ((__stockMarketSymbol_isset != other->__stockMarketSymbol_isset) ||
      (__stockMarketSymbol_isset && ((__stockMarketSymbol || other->__stockMarketSymbol) && ![__stockMarketSymbol isEqual:other->__stockMarketSymbol]))) {
    return NO;
  }
  if ((__logoLink_isset != other->__logoLink_isset) ||
      (__logoLink_isset && ((__logoLink || other->__logoLink) && ![__logoLink isEqual:other->__logoLink]))) {
    return NO;
  }
  if ((__industry_isset != other->__industry_isset) ||
      (__industry_isset && (__industry != other->__industry))) {
    return NO;
  }
  if ((__tier_isset != other->__tier_isset) ||
      (__tier_isset && (__tier != other->__tier))) {
    return NO;
  }
  if ((__organizationDescription_isset != other->__organizationDescription_isset) ||
      (__organizationDescription_isset && ((__organizationDescription || other->__organizationDescription) && ![__organizationDescription isEqual:other->__organizationDescription]))) {
    return NO;
  }
  if ((__githubProfile_isset != other->__githubProfile_isset) ||
      (__githubProfile_isset && ((__githubProfile || other->__githubProfile) && ![__githubProfile isEqual:other->__githubProfile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__organizationId release_stub];
  [__organizationName release_stub];
  [__website release_stub];
  [__logo release_stub];
  [__techStack release_stub];
  [__owners release_stub];
  [__organizationEmail release_stub];
  [__stockMarketSymbol release_stub];
  [__logoLink release_stub];
  [__organizationDescription release_stub];
  [__githubProfile release_stub];
  [super dealloc_stub];
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (NSString *) organizationName {
  return [[__organizationName retain_stub] autorelease_stub];
}

- (void) setOrganizationName: (NSString *) organizationName {
  [organizationName retain_stub];
  [__organizationName release_stub];
  __organizationName = organizationName;
  __organizationName_isset = YES;
}

- (BOOL) organizationNameIsSet {
  return __organizationName_isset;
}

- (void) unsetOrganizationName {
  [__organizationName release_stub];
  __organizationName = nil;
  __organizationName_isset = NO;
}

- (NSString *) website {
  return [[__website retain_stub] autorelease_stub];
}

- (void) setWebsite: (NSString *) website {
  [website retain_stub];
  [__website release_stub];
  __website = website;
  __website_isset = YES;
}

- (BOOL) websiteIsSet {
  return __website_isset;
}

- (void) unsetWebsite {
  [__website release_stub];
  __website = nil;
  __website_isset = NO;
}

- (Aroma_Image *) logo {
  return [[__logo retain_stub] autorelease_stub];
}

- (void) setLogo: (Aroma_Image *) logo {
  [logo retain_stub];
  [__logo release_stub];
  __logo = logo;
  __logo_isset = YES;
}

- (BOOL) logoIsSet {
  return __logo_isset;
}

- (void) unsetLogo {
  [__logo release_stub];
  __logo = nil;
  __logo_isset = NO;
}

- (NSString *) techStack {
  return [[__techStack retain_stub] autorelease_stub];
}

- (void) setTechStack: (NSString *) techStack {
  [techStack retain_stub];
  [__techStack release_stub];
  __techStack = techStack;
  __techStack_isset = YES;
}

- (BOOL) techStackIsSet {
  return __techStack_isset;
}

- (void) unsetTechStack {
  [__techStack release_stub];
  __techStack = nil;
  __techStack_isset = NO;
}

- (NSMutableArray *) owners {
  return [[__owners retain_stub] autorelease_stub];
}

- (void) setOwners: (NSMutableArray *) owners {
  [owners retain_stub];
  [__owners release_stub];
  __owners = owners;
  __owners_isset = YES;
}

- (BOOL) ownersIsSet {
  return __owners_isset;
}

- (void) unsetOwners {
  [__owners release_stub];
  __owners = nil;
  __owners_isset = NO;
}

- (NSString *) organizationEmail {
  return [[__organizationEmail retain_stub] autorelease_stub];
}

- (void) setOrganizationEmail: (NSString *) organizationEmail {
  [organizationEmail retain_stub];
  [__organizationEmail release_stub];
  __organizationEmail = organizationEmail;
  __organizationEmail_isset = YES;
}

- (BOOL) organizationEmailIsSet {
  return __organizationEmail_isset;
}

- (void) unsetOrganizationEmail {
  [__organizationEmail release_stub];
  __organizationEmail = nil;
  __organizationEmail_isset = NO;
}

- (NSString *) stockMarketSymbol {
  return [[__stockMarketSymbol retain_stub] autorelease_stub];
}

- (void) setStockMarketSymbol: (NSString *) stockMarketSymbol {
  [stockMarketSymbol retain_stub];
  [__stockMarketSymbol release_stub];
  __stockMarketSymbol = stockMarketSymbol;
  __stockMarketSymbol_isset = YES;
}

- (BOOL) stockMarketSymbolIsSet {
  return __stockMarketSymbol_isset;
}

- (void) unsetStockMarketSymbol {
  [__stockMarketSymbol release_stub];
  __stockMarketSymbol = nil;
  __stockMarketSymbol_isset = NO;
}

- (NSString *) logoLink {
  return [[__logoLink retain_stub] autorelease_stub];
}

- (void) setLogoLink: (NSString *) logoLink {
  [logoLink retain_stub];
  [__logoLink release_stub];
  __logoLink = logoLink;
  __logoLink_isset = YES;
}

- (BOOL) logoLinkIsSet {
  return __logoLink_isset;
}

- (void) unsetLogoLink {
  [__logoLink release_stub];
  __logoLink = nil;
  __logoLink_isset = NO;
}

- (int) industry {
  return __industry;
}

- (void) setIndustry: (int) industry {
  __industry = industry;
  __industry_isset = YES;
}

- (BOOL) industryIsSet {
  return __industry_isset;
}

- (void) unsetIndustry {
  __industry_isset = NO;
}

- (int) tier {
  return __tier;
}

- (void) setTier: (int) tier {
  __tier = tier;
  __tier_isset = YES;
}

- (BOOL) tierIsSet {
  return __tier_isset;
}

- (void) unsetTier {
  __tier_isset = NO;
}

- (NSString *) organizationDescription {
  return [[__organizationDescription retain_stub] autorelease_stub];
}

- (void) setOrganizationDescription: (NSString *) organizationDescription {
  [organizationDescription retain_stub];
  [__organizationDescription release_stub];
  __organizationDescription = organizationDescription;
  __organizationDescription_isset = YES;
}

- (BOOL) organizationDescriptionIsSet {
  return __organizationDescription_isset;
}

- (void) unsetOrganizationDescription {
  [__organizationDescription release_stub];
  __organizationDescription = nil;
  __organizationDescription_isset = NO;
}

- (NSString *) githubProfile {
  return [[__githubProfile retain_stub] autorelease_stub];
}

- (void) setGithubProfile: (NSString *) githubProfile {
  [githubProfile retain_stub];
  [__githubProfile release_stub];
  __githubProfile = githubProfile;
  __githubProfile_isset = YES;
}

- (BOOL) githubProfileIsSet {
  return __githubProfile_isset;
}

- (void) unsetGithubProfile {
  [__githubProfile release_stub];
  __githubProfile = nil;
  __githubProfile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWebsite: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setLogo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTechStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setOwners: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStockMarketSymbol: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogoLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setIndustry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTier: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGithubProfile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Organization"];
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationName_isset) {
    if (__organizationName != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __organizationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__website_isset) {
    if (__website != nil) {
      [outProtocol writeFieldBeginWithName: @"website" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __website];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logo_isset) {
    if (__logo != nil) {
      [outProtocol writeFieldBeginWithName: @"logo" type: TType_STRUCT fieldID: 4];
      [__logo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__techStack_isset) {
    if (__techStack != nil) {
      [outProtocol writeFieldBeginWithName: @"techStack" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __techStack];
      [outProtocol writeFieldEnd];
    }
  }
  if (__owners_isset) {
    if (__owners != nil) {
      [outProtocol writeFieldBeginWithName: @"owners" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__owners count]];
        int idx4;
        for (idx4 = 0; idx4 < [__owners count]; idx4++)
        {
          [outProtocol writeString: [__owners objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationEmail_isset) {
    if (__organizationEmail != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationEmail" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __organizationEmail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stockMarketSymbol_isset) {
    if (__stockMarketSymbol != nil) {
      [outProtocol writeFieldBeginWithName: @"stockMarketSymbol" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __stockMarketSymbol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logoLink_isset) {
    if (__logoLink != nil) {
      [outProtocol writeFieldBeginWithName: @"logoLink" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __logoLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__industry_isset) {
    [outProtocol writeFieldBeginWithName: @"industry" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __industry];
    [outProtocol writeFieldEnd];
  }
  if (__tier_isset) {
    [outProtocol writeFieldBeginWithName: @"tier" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __tier];
    [outProtocol writeFieldEnd];
  }
  if (__organizationDescription_isset) {
    if (__organizationDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationDescription" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __organizationDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__githubProfile_isset) {
    if (__githubProfile != nil) {
      [outProtocol writeFieldBeginWithName: @"githubProfile" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __githubProfile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Organization("];
  [ms appendString: @"organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @",organizationName:"];
  [ms appendFormat: @"\"%@\"", __organizationName];
  [ms appendString: @",website:"];
  [ms appendFormat: @"\"%@\"", __website];
  [ms appendString: @",logo:"];
  [ms appendFormat: @"%@", __logo];
  [ms appendString: @",techStack:"];
  [ms appendFormat: @"\"%@\"", __techStack];
  [ms appendString: @",owners:"];
  [ms appendFormat: @"%@", __owners];
  [ms appendString: @",organizationEmail:"];
  [ms appendFormat: @"\"%@\"", __organizationEmail];
  [ms appendString: @",stockMarketSymbol:"];
  [ms appendFormat: @"\"%@\"", __stockMarketSymbol];
  [ms appendString: @",logoLink:"];
  [ms appendFormat: @"\"%@\"", __logoLink];
  [ms appendString: @",industry:"];
  [ms appendFormat: @"%i", __industry];
  [ms appendString: @",tier:"];
  [ms appendFormat: @"%i", __tier];
  [ms appendString: @",organizationDescription:"];
  [ms appendFormat: @"\"%@\"", __organizationDescription];
  [ms appendString: @",githubProfile:"];
  [ms appendFormat: @"\"%@\"", __githubProfile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_User

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.roles = [[[NSMutableSet alloc] initWithCapacity:1] autorelease_stub];
  [self.roles addObject:[NSNumber numberWithInt: 1]];

#endif
  return self;
}

- (id) initWithEmail: (NSString *) email userId: (Aroma_uuid) userId name: (NSString *) name roles: (NSMutableSet *) roles profileImage: (Aroma_Image *) profileImage profileImageLink: (Aroma_uuid) profileImageLink githubProfile: (NSString *) githubProfile firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName birthdate: (Aroma_timestamp) birthdate timeUserJoined: (Aroma_timestamp) timeUserJoined
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __roles = [roles retain_stub];
  __roles_isset = YES;
  __profileImage = [profileImage retain_stub];
  __profileImage_isset = YES;
  __profileImageLink = [profileImageLink retain_stub];
  __profileImageLink_isset = YES;
  __githubProfile = [githubProfile retain_stub];
  __githubProfile_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __middleName = [middleName retain_stub];
  __middleName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __birthdate = birthdate;
  __birthdate_isset = YES;
  __timeUserJoined = timeUserJoined;
  __timeUserJoined_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"roles"])
  {
    __roles = [[decoder decodeObjectForKey: @"roles"] retain_stub];
    __roles_isset = YES;
  }
  if ([decoder containsValueForKey: @"profileImage"])
  {
    __profileImage = [[decoder decodeObjectForKey: @"profileImage"] retain_stub];
    __profileImage_isset = YES;
  }
  if ([decoder containsValueForKey: @"profileImageLink"])
  {
    __profileImageLink = [[decoder decodeObjectForKey: @"profileImageLink"] retain_stub];
    __profileImageLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"githubProfile"])
  {
    __githubProfile = [[decoder decodeObjectForKey: @"githubProfile"] retain_stub];
    __githubProfile_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"middleName"])
  {
    __middleName = [[decoder decodeObjectForKey: @"middleName"] retain_stub];
    __middleName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthdate"])
  {
    __birthdate = [decoder decodeInt64ForKey: @"birthdate"];
    __birthdate_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeUserJoined"])
  {
    __timeUserJoined = [decoder decodeInt64ForKey: @"timeUserJoined"];
    __timeUserJoined_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__roles_isset)
  {
    [encoder encodeObject: __roles forKey: @"roles"];
  }
  if (__profileImage_isset)
  {
    [encoder encodeObject: __profileImage forKey: @"profileImage"];
  }
  if (__profileImageLink_isset)
  {
    [encoder encodeObject: __profileImageLink forKey: @"profileImageLink"];
  }
  if (__githubProfile_isset)
  {
    [encoder encodeObject: __githubProfile forKey: @"githubProfile"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__middleName_isset)
  {
    [encoder encodeObject: __middleName forKey: @"middleName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__birthdate_isset)
  {
    [encoder encodeInt64: __birthdate forKey: @"birthdate"];
  }
  if (__timeUserJoined_isset)
  {
    [encoder encodeInt64: __timeUserJoined forKey: @"timeUserJoined"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __roles_isset ? 2654435761 : 0;
  if (__roles_isset)
  {
    hash = (hash * 31) ^ [__roles hash];
  }
  hash = (hash * 31) ^ __profileImage_isset ? 2654435761 : 0;
  if (__profileImage_isset)
  {
    hash = (hash * 31) ^ [__profileImage hash];
  }
  hash = (hash * 31) ^ __profileImageLink_isset ? 2654435761 : 0;
  if (__profileImageLink_isset)
  {
    hash = (hash * 31) ^ [__profileImageLink hash];
  }
  hash = (hash * 31) ^ __githubProfile_isset ? 2654435761 : 0;
  if (__githubProfile_isset)
  {
    hash = (hash * 31) ^ [__githubProfile hash];
  }
  hash = (hash * 31) ^ __firstName_isset ? 2654435761 : 0;
  if (__firstName_isset)
  {
    hash = (hash * 31) ^ [__firstName hash];
  }
  hash = (hash * 31) ^ __middleName_isset ? 2654435761 : 0;
  if (__middleName_isset)
  {
    hash = (hash * 31) ^ [__middleName hash];
  }
  hash = (hash * 31) ^ __lastName_isset ? 2654435761 : 0;
  if (__lastName_isset)
  {
    hash = (hash * 31) ^ [__lastName hash];
  }
  hash = (hash * 31) ^ __birthdate_isset ? 2654435761 : 0;
  if (__birthdate_isset)
  {
    hash = (hash * 31) ^ [@(__birthdate) hash];
  }
  hash = (hash * 31) ^ __timeUserJoined_isset ? 2654435761 : 0;
  if (__timeUserJoined_isset)
  {
    hash = (hash * 31) ^ [@(__timeUserJoined) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_User class]]) {
    return NO;
  }
  Aroma_User *other = (Aroma_User *)anObject;
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__roles_isset != other->__roles_isset) ||
      (__roles_isset && ((__roles || other->__roles) && ![__roles isEqual:other->__roles]))) {
    return NO;
  }
  if ((__profileImage_isset != other->__profileImage_isset) ||
      (__profileImage_isset && ((__profileImage || other->__profileImage) && ![__profileImage isEqual:other->__profileImage]))) {
    return NO;
  }
  if ((__profileImageLink_isset != other->__profileImageLink_isset) ||
      (__profileImageLink_isset && ((__profileImageLink || other->__profileImageLink) && ![__profileImageLink isEqual:other->__profileImageLink]))) {
    return NO;
  }
  if ((__githubProfile_isset != other->__githubProfile_isset) ||
      (__githubProfile_isset && ((__githubProfile || other->__githubProfile) && ![__githubProfile isEqual:other->__githubProfile]))) {
    return NO;
  }
  if ((__firstName_isset != other->__firstName_isset) ||
      (__firstName_isset && ((__firstName || other->__firstName) && ![__firstName isEqual:other->__firstName]))) {
    return NO;
  }
  if ((__middleName_isset != other->__middleName_isset) ||
      (__middleName_isset && ((__middleName || other->__middleName) && ![__middleName isEqual:other->__middleName]))) {
    return NO;
  }
  if ((__lastName_isset != other->__lastName_isset) ||
      (__lastName_isset && ((__lastName || other->__lastName) && ![__lastName isEqual:other->__lastName]))) {
    return NO;
  }
  if ((__birthdate_isset != other->__birthdate_isset) ||
      (__birthdate_isset && (__birthdate != other->__birthdate))) {
    return NO;
  }
  if ((__timeUserJoined_isset != other->__timeUserJoined_isset) ||
      (__timeUserJoined_isset && (__timeUserJoined != other->__timeUserJoined))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__email release_stub];
  [__userId release_stub];
  [__name release_stub];
  [__roles release_stub];
  [__profileImage release_stub];
  [__profileImageLink release_stub];
  [__githubProfile release_stub];
  [__firstName release_stub];
  [__middleName release_stub];
  [__lastName release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableSet *) roles {
  return [[__roles retain_stub] autorelease_stub];
}

- (void) setRoles: (NSMutableSet *) roles {
  [roles retain_stub];
  [__roles release_stub];
  __roles = roles;
  __roles_isset = YES;
}

- (BOOL) rolesIsSet {
  return __roles_isset;
}

- (void) unsetRoles {
  [__roles release_stub];
  __roles = nil;
  __roles_isset = NO;
}

- (Aroma_Image *) profileImage {
  return [[__profileImage retain_stub] autorelease_stub];
}

- (void) setProfileImage: (Aroma_Image *) profileImage {
  [profileImage retain_stub];
  [__profileImage release_stub];
  __profileImage = profileImage;
  __profileImage_isset = YES;
}

- (BOOL) profileImageIsSet {
  return __profileImage_isset;
}

- (void) unsetProfileImage {
  [__profileImage release_stub];
  __profileImage = nil;
  __profileImage_isset = NO;
}

- (NSString *) profileImageLink {
  return [[__profileImageLink retain_stub] autorelease_stub];
}

- (void) setProfileImageLink: (NSString *) profileImageLink {
  [profileImageLink retain_stub];
  [__profileImageLink release_stub];
  __profileImageLink = profileImageLink;
  __profileImageLink_isset = YES;
}

- (BOOL) profileImageLinkIsSet {
  return __profileImageLink_isset;
}

- (void) unsetProfileImageLink {
  [__profileImageLink release_stub];
  __profileImageLink = nil;
  __profileImageLink_isset = NO;
}

- (NSString *) githubProfile {
  return [[__githubProfile retain_stub] autorelease_stub];
}

- (void) setGithubProfile: (NSString *) githubProfile {
  [githubProfile retain_stub];
  [__githubProfile release_stub];
  __githubProfile = githubProfile;
  __githubProfile_isset = YES;
}

- (BOOL) githubProfileIsSet {
  return __githubProfile_isset;
}

- (void) unsetGithubProfile {
  [__githubProfile release_stub];
  __githubProfile = nil;
  __githubProfile_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) middleName {
  return [[__middleName retain_stub] autorelease_stub];
}

- (void) setMiddleName: (NSString *) middleName {
  [middleName retain_stub];
  [__middleName release_stub];
  __middleName = middleName;
  __middleName_isset = YES;
}

- (BOOL) middleNameIsSet {
  return __middleName_isset;
}

- (void) unsetMiddleName {
  [__middleName release_stub];
  __middleName = nil;
  __middleName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (int64_t) birthdate {
  return __birthdate;
}

- (void) setBirthdate: (int64_t) birthdate {
  __birthdate = birthdate;
  __birthdate_isset = YES;
}

- (BOOL) birthdateIsSet {
  return __birthdate_isset;
}

- (void) unsetBirthdate {
  __birthdate_isset = NO;
}

- (int64_t) timeUserJoined {
  return __timeUserJoined;
}

- (void) setTimeUserJoined: (int64_t) timeUserJoined {
  __timeUserJoined = timeUserJoined;
  __timeUserJoined_isset = YES;
}

- (BOOL) timeUserJoinedIsSet {
  return __timeUserJoined_isset;
}

- (void) unsetTimeUserJoined {
  __timeUserJoined_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_SET) {
          int _size5;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size5];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            int _elem7 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithInt: _elem7]];
          }
          [inProtocol readSetEnd];
          [self setRoles: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setProfileImage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProfileImageLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGithubProfile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMiddleName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBirthdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeUserJoined: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roles_isset) {
    if (__roles != nil) {
      [outProtocol writeFieldBeginWithName: @"roles" type: TType_SET fieldID: 4];
      {
        [outProtocol writeSetBeginWithElementType: TType_I32 size: [__roles count]];
        NSEnumerator * _iter8 = [__roles objectEnumerator];
        id obj9;
        while ((obj9 = [_iter8 nextObject]))
        {
          [outProtocol writeI32: [obj9 intValue]];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__profileImage_isset) {
    if (__profileImage != nil) {
      [outProtocol writeFieldBeginWithName: @"profileImage" type: TType_STRUCT fieldID: 5];
      [__profileImage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__profileImageLink_isset) {
    if (__profileImageLink != nil) {
      [outProtocol writeFieldBeginWithName: @"profileImageLink" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __profileImageLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__githubProfile_isset) {
    if (__githubProfile != nil) {
      [outProtocol writeFieldBeginWithName: @"githubProfile" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __githubProfile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__middleName_isset) {
    if (__middleName != nil) {
      [outProtocol writeFieldBeginWithName: @"middleName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __middleName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthdate_isset) {
    [outProtocol writeFieldBeginWithName: @"birthdate" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __birthdate];
    [outProtocol writeFieldEnd];
  }
  if (__timeUserJoined_isset) {
    [outProtocol writeFieldBeginWithName: @"timeUserJoined" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __timeUserJoined];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_User("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",roles:"];
  [ms appendFormat: @"%@", __roles];
  [ms appendString: @",profileImage:"];
  [ms appendFormat: @"%@", __profileImage];
  [ms appendString: @",profileImageLink:"];
  [ms appendFormat: @"\"%@\"", __profileImageLink];
  [ms appendString: @",githubProfile:"];
  [ms appendFormat: @"\"%@\"", __githubProfile];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",middleName:"];
  [ms appendFormat: @"\"%@\"", __middleName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",birthdate:"];
  [ms appendFormat: @"%qi", __birthdate];
  [ms appendString: @",timeUserJoined:"];
  [ms appendFormat: @"%qi", __timeUserJoined];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Application

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.followers = [[[NSMutableSet alloc] initWithCapacity:0] autorelease_stub];

  self.tier = 1;

#endif
  return self;
}

- (id) initWithOwners: (NSMutableSet *) owners timeOfProvisioning: (Aroma_timestamp) timeOfProvisioning name: (NSString *) name applicationId: (Aroma_uuid) applicationId totalMessagesSent: (Aroma_long) totalMessagesSent icon: (Aroma_Image *) icon programmingLanguage: (int) programmingLanguage followers: (NSMutableSet *) followers applicationDescription: (NSString *) applicationDescription organizationId: (Aroma_uuid) organizationId tier: (int) tier timeOfTokenExpiration: (Aroma_timestamp) timeOfTokenExpiration applicationIconMediaId: (Aroma_uuid) applicationIconMediaId isFollowing: (BOOL) isFollowing
{
  self = [super init];
  __owners = [owners retain_stub];
  __owners_isset = YES;
  __timeOfProvisioning = timeOfProvisioning;
  __timeOfProvisioning_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __totalMessagesSent = totalMessagesSent;
  __totalMessagesSent_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
  __followers = [followers retain_stub];
  __followers_isset = YES;
  __applicationDescription = [applicationDescription retain_stub];
  __applicationDescription_isset = YES;
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  __tier = tier;
  __tier_isset = YES;
  __timeOfTokenExpiration = timeOfTokenExpiration;
  __timeOfTokenExpiration_isset = YES;
  __applicationIconMediaId = [applicationIconMediaId retain_stub];
  __applicationIconMediaId_isset = YES;
  __isFollowing = isFollowing;
  __isFollowing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"owners"])
  {
    __owners = [[decoder decodeObjectForKey: @"owners"] retain_stub];
    __owners_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfProvisioning"])
  {
    __timeOfProvisioning = [decoder decodeInt64ForKey: @"timeOfProvisioning"];
    __timeOfProvisioning_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesSent"])
  {
    __totalMessagesSent = [decoder decodeInt64ForKey: @"totalMessagesSent"];
    __totalMessagesSent_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  if ([decoder containsValueForKey: @"programmingLanguage"])
  {
    __programmingLanguage = [decoder decodeIntForKey: @"programmingLanguage"];
    __programmingLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"followers"])
  {
    __followers = [[decoder decodeObjectForKey: @"followers"] retain_stub];
    __followers_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationDescription"])
  {
    __applicationDescription = [[decoder decodeObjectForKey: @"applicationDescription"] retain_stub];
    __applicationDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"tier"])
  {
    __tier = [decoder decodeIntForKey: @"tier"];
    __tier_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfTokenExpiration"])
  {
    __timeOfTokenExpiration = [decoder decodeInt64ForKey: @"timeOfTokenExpiration"];
    __timeOfTokenExpiration_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationIconMediaId"])
  {
    __applicationIconMediaId = [[decoder decodeObjectForKey: @"applicationIconMediaId"] retain_stub];
    __applicationIconMediaId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isFollowing"])
  {
    __isFollowing = [decoder decodeBoolForKey: @"isFollowing"];
    __isFollowing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__owners_isset)
  {
    [encoder encodeObject: __owners forKey: @"owners"];
  }
  if (__timeOfProvisioning_isset)
  {
    [encoder encodeInt64: __timeOfProvisioning forKey: @"timeOfProvisioning"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__totalMessagesSent_isset)
  {
    [encoder encodeInt64: __totalMessagesSent forKey: @"totalMessagesSent"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
  if (__programmingLanguage_isset)
  {
    [encoder encodeInt: __programmingLanguage forKey: @"programmingLanguage"];
  }
  if (__followers_isset)
  {
    [encoder encodeObject: __followers forKey: @"followers"];
  }
  if (__applicationDescription_isset)
  {
    [encoder encodeObject: __applicationDescription forKey: @"applicationDescription"];
  }
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
  if (__tier_isset)
  {
    [encoder encodeInt: __tier forKey: @"tier"];
  }
  if (__timeOfTokenExpiration_isset)
  {
    [encoder encodeInt64: __timeOfTokenExpiration forKey: @"timeOfTokenExpiration"];
  }
  if (__applicationIconMediaId_isset)
  {
    [encoder encodeObject: __applicationIconMediaId forKey: @"applicationIconMediaId"];
  }
  if (__isFollowing_isset)
  {
    [encoder encodeBool: __isFollowing forKey: @"isFollowing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __owners_isset ? 2654435761 : 0;
  if (__owners_isset)
  {
    hash = (hash * 31) ^ [__owners hash];
  }
  hash = (hash * 31) ^ __timeOfProvisioning_isset ? 2654435761 : 0;
  if (__timeOfProvisioning_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfProvisioning) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __totalMessagesSent_isset ? 2654435761 : 0;
  if (__totalMessagesSent_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesSent) hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  hash = (hash * 31) ^ __programmingLanguage_isset ? 2654435761 : 0;
  if (__programmingLanguage_isset)
  {
    hash = (hash * 31) ^ [@(__programmingLanguage) hash];
  }
  hash = (hash * 31) ^ __followers_isset ? 2654435761 : 0;
  if (__followers_isset)
  {
    hash = (hash * 31) ^ [__followers hash];
  }
  hash = (hash * 31) ^ __applicationDescription_isset ? 2654435761 : 0;
  if (__applicationDescription_isset)
  {
    hash = (hash * 31) ^ [__applicationDescription hash];
  }
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  hash = (hash * 31) ^ __tier_isset ? 2654435761 : 0;
  if (__tier_isset)
  {
    hash = (hash * 31) ^ [@(__tier) hash];
  }
  hash = (hash * 31) ^ __timeOfTokenExpiration_isset ? 2654435761 : 0;
  if (__timeOfTokenExpiration_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfTokenExpiration) hash];
  }
  hash = (hash * 31) ^ __applicationIconMediaId_isset ? 2654435761 : 0;
  if (__applicationIconMediaId_isset)
  {
    hash = (hash * 31) ^ [__applicationIconMediaId hash];
  }
  hash = (hash * 31) ^ __isFollowing_isset ? 2654435761 : 0;
  if (__isFollowing_isset)
  {
    hash = (hash * 31) ^ [@(__isFollowing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Application class]]) {
    return NO;
  }
  Aroma_Application *other = (Aroma_Application *)anObject;
  if ((__owners_isset != other->__owners_isset) ||
      (__owners_isset && ((__owners || other->__owners) && ![__owners isEqual:other->__owners]))) {
    return NO;
  }
  if ((__timeOfProvisioning_isset != other->__timeOfProvisioning_isset) ||
      (__timeOfProvisioning_isset && (__timeOfProvisioning != other->__timeOfProvisioning))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__totalMessagesSent_isset != other->__totalMessagesSent_isset) ||
      (__totalMessagesSent_isset && (__totalMessagesSent != other->__totalMessagesSent))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  if ((__programmingLanguage_isset != other->__programmingLanguage_isset) ||
      (__programmingLanguage_isset && (__programmingLanguage != other->__programmingLanguage))) {
    return NO;
  }
  if ((__followers_isset != other->__followers_isset) ||
      (__followers_isset && ((__followers || other->__followers) && ![__followers isEqual:other->__followers]))) {
    return NO;
  }
  if ((__applicationDescription_isset != other->__applicationDescription_isset) ||
      (__applicationDescription_isset && ((__applicationDescription || other->__applicationDescription) && ![__applicationDescription isEqual:other->__applicationDescription]))) {
    return NO;
  }
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  if ((__tier_isset != other->__tier_isset) ||
      (__tier_isset && (__tier != other->__tier))) {
    return NO;
  }
  if ((__timeOfTokenExpiration_isset != other->__timeOfTokenExpiration_isset) ||
      (__timeOfTokenExpiration_isset && (__timeOfTokenExpiration != other->__timeOfTokenExpiration))) {
    return NO;
  }
  if ((__applicationIconMediaId_isset != other->__applicationIconMediaId_isset) ||
      (__applicationIconMediaId_isset && ((__applicationIconMediaId || other->__applicationIconMediaId) && ![__applicationIconMediaId isEqual:other->__applicationIconMediaId]))) {
    return NO;
  }
  if ((__isFollowing_isset != other->__isFollowing_isset) ||
      (__isFollowing_isset && (__isFollowing != other->__isFollowing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__owners release_stub];
  [__name release_stub];
  [__applicationId release_stub];
  [__icon release_stub];
  [__followers release_stub];
  [__applicationDescription release_stub];
  [__organizationId release_stub];
  [__applicationIconMediaId release_stub];
  [super dealloc_stub];
}

- (NSMutableSet *) owners {
  return [[__owners retain_stub] autorelease_stub];
}

- (void) setOwners: (NSMutableSet *) owners {
  [owners retain_stub];
  [__owners release_stub];
  __owners = owners;
  __owners_isset = YES;
}

- (BOOL) ownersIsSet {
  return __owners_isset;
}

- (void) unsetOwners {
  [__owners release_stub];
  __owners = nil;
  __owners_isset = NO;
}

- (int64_t) timeOfProvisioning {
  return __timeOfProvisioning;
}

- (void) setTimeOfProvisioning: (int64_t) timeOfProvisioning {
  __timeOfProvisioning = timeOfProvisioning;
  __timeOfProvisioning_isset = YES;
}

- (BOOL) timeOfProvisioningIsSet {
  return __timeOfProvisioning_isset;
}

- (void) unsetTimeOfProvisioning {
  __timeOfProvisioning_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (int64_t) totalMessagesSent {
  return __totalMessagesSent;
}

- (void) setTotalMessagesSent: (int64_t) totalMessagesSent {
  __totalMessagesSent = totalMessagesSent;
  __totalMessagesSent_isset = YES;
}

- (BOOL) totalMessagesSentIsSet {
  return __totalMessagesSent_isset;
}

- (void) unsetTotalMessagesSent {
  __totalMessagesSent_isset = NO;
}

- (Aroma_Image *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (Aroma_Image *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (int) programmingLanguage {
  return __programmingLanguage;
}

- (void) setProgrammingLanguage: (int) programmingLanguage {
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
}

- (BOOL) programmingLanguageIsSet {
  return __programmingLanguage_isset;
}

- (void) unsetProgrammingLanguage {
  __programmingLanguage_isset = NO;
}

- (NSMutableSet *) followers {
  return [[__followers retain_stub] autorelease_stub];
}

- (void) setFollowers: (NSMutableSet *) followers {
  [followers retain_stub];
  [__followers release_stub];
  __followers = followers;
  __followers_isset = YES;
}

- (BOOL) followersIsSet {
  return __followers_isset;
}

- (void) unsetFollowers {
  [__followers release_stub];
  __followers = nil;
  __followers_isset = NO;
}

- (NSString *) applicationDescription {
  return [[__applicationDescription retain_stub] autorelease_stub];
}

- (void) setApplicationDescription: (NSString *) applicationDescription {
  [applicationDescription retain_stub];
  [__applicationDescription release_stub];
  __applicationDescription = applicationDescription;
  __applicationDescription_isset = YES;
}

- (BOOL) applicationDescriptionIsSet {
  return __applicationDescription_isset;
}

- (void) unsetApplicationDescription {
  [__applicationDescription release_stub];
  __applicationDescription = nil;
  __applicationDescription_isset = NO;
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (int) tier {
  return __tier;
}

- (void) setTier: (int) tier {
  __tier = tier;
  __tier_isset = YES;
}

- (BOOL) tierIsSet {
  return __tier_isset;
}

- (void) unsetTier {
  __tier_isset = NO;
}

- (int64_t) timeOfTokenExpiration {
  return __timeOfTokenExpiration;
}

- (void) setTimeOfTokenExpiration: (int64_t) timeOfTokenExpiration {
  __timeOfTokenExpiration = timeOfTokenExpiration;
  __timeOfTokenExpiration_isset = YES;
}

- (BOOL) timeOfTokenExpirationIsSet {
  return __timeOfTokenExpiration_isset;
}

- (void) unsetTimeOfTokenExpiration {
  __timeOfTokenExpiration_isset = NO;
}

- (NSString *) applicationIconMediaId {
  return [[__applicationIconMediaId retain_stub] autorelease_stub];
}

- (void) setApplicationIconMediaId: (NSString *) applicationIconMediaId {
  [applicationIconMediaId retain_stub];
  [__applicationIconMediaId release_stub];
  __applicationIconMediaId = applicationIconMediaId;
  __applicationIconMediaId_isset = YES;
}

- (BOOL) applicationIconMediaIdIsSet {
  return __applicationIconMediaId_isset;
}

- (void) unsetApplicationIconMediaId {
  [__applicationIconMediaId release_stub];
  __applicationIconMediaId = nil;
  __applicationIconMediaId_isset = NO;
}

- (BOOL) isFollowing {
  return __isFollowing;
}

- (void) setIsFollowing: (BOOL) isFollowing {
  __isFollowing = isFollowing;
  __isFollowing_isset = YES;
}

- (BOOL) isFollowingIsSet {
  return __isFollowing_isset;
}

- (void) unsetIsFollowing {
  __isFollowing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_SET) {
          int _size10;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size10];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readSetEnd];
          [self setOwners: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfProvisioning: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTotalMessagesSent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setIcon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setProgrammingLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_SET) {
          int _size13;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size13];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            NSString * _elem15 = [inProtocol readString];
            [fieldValue addObject: _elem15];
          }
          [inProtocol readSetEnd];
          [self setFollowers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTier: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfTokenExpiration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationIconMediaId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsFollowing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Application"];
  if (__owners_isset) {
    if (__owners != nil) {
      [outProtocol writeFieldBeginWithName: @"owners" type: TType_SET fieldID: 1];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__owners count]];
        NSEnumerator * _iter16 = [__owners objectEnumerator];
        id obj17;
        while ((obj17 = [_iter16 nextObject]))
        {
          [outProtocol writeString: obj17];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeOfProvisioning_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfProvisioning" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timeOfProvisioning];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalMessagesSent_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesSent" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __totalMessagesSent];
    [outProtocol writeFieldEnd];
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRUCT fieldID: 6];
      [__icon write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__programmingLanguage_isset) {
    [outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __programmingLanguage];
    [outProtocol writeFieldEnd];
  }
  if (__followers_isset) {
    if (__followers != nil) {
      [outProtocol writeFieldBeginWithName: @"followers" type: TType_SET fieldID: 8];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__followers count]];
        NSEnumerator * _iter18 = [__followers objectEnumerator];
        id obj19;
        while ((obj19 = [_iter18 nextObject]))
        {
          [outProtocol writeString: obj19];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationDescription_isset) {
    if (__applicationDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationDescription" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __applicationDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tier_isset) {
    [outProtocol writeFieldBeginWithName: @"tier" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __tier];
    [outProtocol writeFieldEnd];
  }
  if (__timeOfTokenExpiration_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfTokenExpiration" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __timeOfTokenExpiration];
    [outProtocol writeFieldEnd];
  }
  if (__applicationIconMediaId_isset) {
    if (__applicationIconMediaId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationIconMediaId" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __applicationIconMediaId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isFollowing_isset) {
    [outProtocol writeFieldBeginWithName: @"isFollowing" type: TType_BOOL fieldID: 14];
    [outProtocol writeBool: __isFollowing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Application("];
  [ms appendString: @"owners:"];
  [ms appendFormat: @"%@", __owners];
  [ms appendString: @",timeOfProvisioning:"];
  [ms appendFormat: @"%qi", __timeOfProvisioning];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",totalMessagesSent:"];
  [ms appendFormat: @"%qi", __totalMessagesSent];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"%@", __icon];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"%i", __programmingLanguage];
  [ms appendString: @",followers:"];
  [ms appendFormat: @"%@", __followers];
  [ms appendString: @",applicationDescription:"];
  [ms appendFormat: @"\"%@\"", __applicationDescription];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @",tier:"];
  [ms appendFormat: @"%i", __tier];
  [ms appendString: @",timeOfTokenExpiration:"];
  [ms appendFormat: @"%qi", __timeOfTokenExpiration];
  [ms appendString: @",applicationIconMediaId:"];
  [ms appendFormat: @"\"%@\"", __applicationIconMediaId];
  [ms appendString: @",isFollowing:"];
  [ms appendFormat: @"%i", __isFollowing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_ServiceAnnouncement

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message importance: (int) importance id: (Aroma_uuid) id timeOfExpiration: (Aroma_timestamp) timeOfExpiration
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __importance = importance;
  __importance_isset = YES;
  __id = [id retain_stub];
  __id_isset = YES;
  __timeOfExpiration = timeOfExpiration;
  __timeOfExpiration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"importance"])
  {
    __importance = [decoder decodeIntForKey: @"importance"];
    __importance_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfExpiration"])
  {
    __timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
    __timeOfExpiration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__importance_isset)
  {
    [encoder encodeInt: __importance forKey: @"importance"];
  }
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__timeOfExpiration_isset)
  {
    [encoder encodeInt64: __timeOfExpiration forKey: @"timeOfExpiration"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __importance_isset ? 2654435761 : 0;
  if (__importance_isset)
  {
    hash = (hash * 31) ^ [@(__importance) hash];
  }
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __timeOfExpiration_isset ? 2654435761 : 0;
  if (__timeOfExpiration_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfExpiration) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_ServiceAnnouncement class]]) {
    return NO;
  }
  Aroma_ServiceAnnouncement *other = (Aroma_ServiceAnnouncement *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__importance_isset != other->__importance_isset) ||
      (__importance_isset && (__importance != other->__importance))) {
    return NO;
  }
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__timeOfExpiration_isset != other->__timeOfExpiration_isset) ||
      (__timeOfExpiration_isset && (__timeOfExpiration != other->__timeOfExpiration))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__id release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (int) importance {
  return __importance;
}

- (void) setImportance: (int) importance {
  __importance = importance;
  __importance_isset = YES;
}

- (BOOL) importanceIsSet {
  return __importance_isset;
}

- (void) unsetImportance {
  __importance_isset = NO;
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int64_t) timeOfExpiration {
  return __timeOfExpiration;
}

- (void) setTimeOfExpiration: (int64_t) timeOfExpiration {
  __timeOfExpiration = timeOfExpiration;
  __timeOfExpiration_isset = YES;
}

- (BOOL) timeOfExpirationIsSet {
  return __timeOfExpiration_isset;
}

- (void) unsetTimeOfExpiration {
  __timeOfExpiration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setImportance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfExpiration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceAnnouncement"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__importance_isset) {
    [outProtocol writeFieldBeginWithName: @"importance" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __importance];
    [outProtocol writeFieldEnd];
  }
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeOfExpiration_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __timeOfExpiration];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_ServiceAnnouncement("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",importance:"];
  [ms appendFormat: @"%i", __importance];
  [ms appendString: @",id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", __timeOfExpiration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static double Aroma_API_VERSION = 1.1;

@implementation Aroma_AromaConstants
+ (void) initialize {
}
+ (double) API_VERSION{
  return Aroma_API_VERSION;
}
@end


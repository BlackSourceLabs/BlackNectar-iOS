/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Aroma.h"
#import "Endpoint.h"
#import "Exceptions.h"

#import "AuthenticationService.h"

@implementation AuthenticationService_CreateTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOwnerId: (AuthenticationService_uuid) ownerId lifetime: (AuthenticationService_LengthOfTime) lifetime desiredTokenType: (AuthenticationService_TokenType) desiredTokenType ownerName: (NSString *) ownerName organizationId: (AuthenticationService_uuid) organizationId organizationName: (NSString *) organizationName
{
  self = [super init];
  __ownerId = [ownerId retain_stub];
  __ownerId_isset = YES;
  __lifetime = [lifetime retain_stub];
  __lifetime_isset = YES;
  __desiredTokenType = desiredTokenType;
  __desiredTokenType_isset = YES;
  __ownerName = [ownerName retain_stub];
  __ownerName_isset = YES;
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  __organizationName = [organizationName retain_stub];
  __organizationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ownerId"])
  {
    __ownerId = [[decoder decodeObjectForKey: @"ownerId"] retain_stub];
    __ownerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"lifetime"])
  {
    __lifetime = [[decoder decodeObjectForKey: @"lifetime"] retain_stub];
    __lifetime_isset = YES;
  }
  if ([decoder containsValueForKey: @"desiredTokenType"])
  {
    __desiredTokenType = [decoder decodeIntForKey: @"desiredTokenType"];
    __desiredTokenType_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownerName"])
  {
    __ownerName = [[decoder decodeObjectForKey: @"ownerName"] retain_stub];
    __ownerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationName"])
  {
    __organizationName = [[decoder decodeObjectForKey: @"organizationName"] retain_stub];
    __organizationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ownerId_isset)
  {
    [encoder encodeObject: __ownerId forKey: @"ownerId"];
  }
  if (__lifetime_isset)
  {
    [encoder encodeObject: __lifetime forKey: @"lifetime"];
  }
  if (__desiredTokenType_isset)
  {
    [encoder encodeInt: __desiredTokenType forKey: @"desiredTokenType"];
  }
  if (__ownerName_isset)
  {
    [encoder encodeObject: __ownerName forKey: @"ownerName"];
  }
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
  if (__organizationName_isset)
  {
    [encoder encodeObject: __organizationName forKey: @"organizationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ownerId_isset ? 2654435761 : 0;
  if (__ownerId_isset)
  {
    hash = (hash * 31) ^ [__ownerId hash];
  }
  hash = (hash * 31) ^ __lifetime_isset ? 2654435761 : 0;
  if (__lifetime_isset)
  {
    hash = (hash * 31) ^ [__lifetime hash];
  }
  hash = (hash * 31) ^ __desiredTokenType_isset ? 2654435761 : 0;
  if (__desiredTokenType_isset)
  {
    hash = (hash * 31) ^ [@(__desiredTokenType) hash];
  }
  hash = (hash * 31) ^ __ownerName_isset ? 2654435761 : 0;
  if (__ownerName_isset)
  {
    hash = (hash * 31) ^ [__ownerName hash];
  }
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  hash = (hash * 31) ^ __organizationName_isset ? 2654435761 : 0;
  if (__organizationName_isset)
  {
    hash = (hash * 31) ^ [__organizationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_CreateTokenRequest class]]) {
    return NO;
  }
  AuthenticationService_CreateTokenRequest *other = (AuthenticationService_CreateTokenRequest *)anObject;
  if ((__ownerId_isset != other->__ownerId_isset) ||
      (__ownerId_isset && ((__ownerId || other->__ownerId) && ![__ownerId isEqual:other->__ownerId]))) {
    return NO;
  }
  if ((__lifetime_isset != other->__lifetime_isset) ||
      (__lifetime_isset && ((__lifetime || other->__lifetime) && ![__lifetime isEqual:other->__lifetime]))) {
    return NO;
  }
  if ((__desiredTokenType_isset != other->__desiredTokenType_isset) ||
      (__desiredTokenType_isset && (__desiredTokenType != other->__desiredTokenType))) {
    return NO;
  }
  if ((__ownerName_isset != other->__ownerName_isset) ||
      (__ownerName_isset && ((__ownerName || other->__ownerName) && ![__ownerName isEqual:other->__ownerName]))) {
    return NO;
  }
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  if ((__organizationName_isset != other->__organizationName_isset) ||
      (__organizationName_isset && ((__organizationName || other->__organizationName) && ![__organizationName isEqual:other->__organizationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ownerId release_stub];
  [__lifetime release_stub];
  [__ownerName release_stub];
  [__organizationId release_stub];
  [__organizationName release_stub];
  [super dealloc_stub];
}

- (NSString *) ownerId {
  return [[__ownerId retain_stub] autorelease_stub];
}

- (void) setOwnerId: (NSString *) ownerId {
  [ownerId retain_stub];
  [__ownerId release_stub];
  __ownerId = ownerId;
  __ownerId_isset = YES;
}

- (BOOL) ownerIdIsSet {
  return __ownerId_isset;
}

- (void) unsetOwnerId {
  [__ownerId release_stub];
  __ownerId = nil;
  __ownerId_isset = NO;
}

- (Aroma_LengthOfTime *) lifetime {
  return [[__lifetime retain_stub] autorelease_stub];
}

- (void) setLifetime: (Aroma_LengthOfTime *) lifetime {
  [lifetime retain_stub];
  [__lifetime release_stub];
  __lifetime = lifetime;
  __lifetime_isset = YES;
}

- (BOOL) lifetimeIsSet {
  return __lifetime_isset;
}

- (void) unsetLifetime {
  [__lifetime release_stub];
  __lifetime = nil;
  __lifetime_isset = NO;
}

- (int) desiredTokenType {
  return __desiredTokenType;
}

- (void) setDesiredTokenType: (int) desiredTokenType {
  __desiredTokenType = desiredTokenType;
  __desiredTokenType_isset = YES;
}

- (BOOL) desiredTokenTypeIsSet {
  return __desiredTokenType_isset;
}

- (void) unsetDesiredTokenType {
  __desiredTokenType_isset = NO;
}

- (NSString *) ownerName {
  return [[__ownerName retain_stub] autorelease_stub];
}

- (void) setOwnerName: (NSString *) ownerName {
  [ownerName retain_stub];
  [__ownerName release_stub];
  __ownerName = ownerName;
  __ownerName_isset = YES;
}

- (BOOL) ownerNameIsSet {
  return __ownerName_isset;
}

- (void) unsetOwnerName {
  [__ownerName release_stub];
  __ownerName = nil;
  __ownerName_isset = NO;
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (NSString *) organizationName {
  return [[__organizationName retain_stub] autorelease_stub];
}

- (void) setOrganizationName: (NSString *) organizationName {
  [organizationName retain_stub];
  [__organizationName release_stub];
  __organizationName = organizationName;
  __organizationName_isset = YES;
}

- (BOOL) organizationNameIsSet {
  return __organizationName_isset;
}

- (void) unsetOrganizationName {
  [__organizationName release_stub];
  __organizationName = nil;
  __organizationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwnerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Aroma_LengthOfTime *fieldValue = [[Aroma_LengthOfTime alloc] init];
          [fieldValue read: inProtocol];
          [self setLifetime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setDesiredTokenType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwnerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateTokenRequest"];
  if (__ownerId_isset) {
    if (__ownerId != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ownerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lifetime_isset) {
    if (__lifetime != nil) {
      [outProtocol writeFieldBeginWithName: @"lifetime" type: TType_STRUCT fieldID: 2];
      [__lifetime write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desiredTokenType_isset) {
    [outProtocol writeFieldBeginWithName: @"desiredTokenType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __desiredTokenType];
    [outProtocol writeFieldEnd];
  }
  if (__ownerName_isset) {
    if (__ownerName != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __ownerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationName_isset) {
    if (__organizationName != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __organizationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_CreateTokenRequest("];
  [ms appendString: @"ownerId:"];
  [ms appendFormat: @"\"%@\"", __ownerId];
  [ms appendString: @",lifetime:"];
  [ms appendFormat: @"%@", __lifetime];
  [ms appendString: @",desiredTokenType:"];
  [ms appendFormat: @"%i", __desiredTokenType];
  [ms appendString: @",ownerName:"];
  [ms appendFormat: @"\"%@\"", __ownerName];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @",organizationName:"];
  [ms appendFormat: @"\"%@\"", __organizationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_CreateTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (AuthenticationService_AuthenticationToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_CreateTokenResponse class]]) {
    return NO;
  }
  AuthenticationService_CreateTokenResponse *other = (AuthenticationService_CreateTokenResponse *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (AromaAuthentication_AuthenticationToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (AromaAuthentication_AuthenticationToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaAuthentication_AuthenticationToken *fieldValue = [[AromaAuthentication_AuthenticationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateTokenResponse"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_CreateTokenResponse("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_GetTokenInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTokenId: (NSString *) tokenId tokenType: (AuthenticationService_TokenType) tokenType
{
  self = [super init];
  __tokenId = [tokenId retain_stub];
  __tokenId_isset = YES;
  __tokenType = tokenType;
  __tokenType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tokenId"])
  {
    __tokenId = [[decoder decodeObjectForKey: @"tokenId"] retain_stub];
    __tokenId_isset = YES;
  }
  if ([decoder containsValueForKey: @"tokenType"])
  {
    __tokenType = [decoder decodeIntForKey: @"tokenType"];
    __tokenType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tokenId_isset)
  {
    [encoder encodeObject: __tokenId forKey: @"tokenId"];
  }
  if (__tokenType_isset)
  {
    [encoder encodeInt: __tokenType forKey: @"tokenType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tokenId_isset ? 2654435761 : 0;
  if (__tokenId_isset)
  {
    hash = (hash * 31) ^ [__tokenId hash];
  }
  hash = (hash * 31) ^ __tokenType_isset ? 2654435761 : 0;
  if (__tokenType_isset)
  {
    hash = (hash * 31) ^ [@(__tokenType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_GetTokenInfoRequest class]]) {
    return NO;
  }
  AuthenticationService_GetTokenInfoRequest *other = (AuthenticationService_GetTokenInfoRequest *)anObject;
  if ((__tokenId_isset != other->__tokenId_isset) ||
      (__tokenId_isset && ((__tokenId || other->__tokenId) && ![__tokenId isEqual:other->__tokenId]))) {
    return NO;
  }
  if ((__tokenType_isset != other->__tokenType_isset) ||
      (__tokenType_isset && (__tokenType != other->__tokenType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tokenId release_stub];
  [super dealloc_stub];
}

- (NSString *) tokenId {
  return [[__tokenId retain_stub] autorelease_stub];
}

- (void) setTokenId: (NSString *) tokenId {
  [tokenId retain_stub];
  [__tokenId release_stub];
  __tokenId = tokenId;
  __tokenId_isset = YES;
}

- (BOOL) tokenIdIsSet {
  return __tokenId_isset;
}

- (void) unsetTokenId {
  [__tokenId release_stub];
  __tokenId = nil;
  __tokenId_isset = NO;
}

- (int) tokenType {
  return __tokenType;
}

- (void) setTokenType: (int) tokenType {
  __tokenType = tokenType;
  __tokenType_isset = YES;
}

- (BOOL) tokenTypeIsSet {
  return __tokenType_isset;
}

- (void) unsetTokenType {
  __tokenType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTokenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTokenType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTokenInfoRequest"];
  if (__tokenId_isset) {
    if (__tokenId != nil) {
      [outProtocol writeFieldBeginWithName: @"tokenId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tokenId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tokenType_isset) {
    [outProtocol writeFieldBeginWithName: @"tokenType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __tokenType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_GetTokenInfoRequest("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", __tokenId];
  [ms appendString: @",tokenType:"];
  [ms appendFormat: @"%i", __tokenType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_GetTokenInfoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (AuthenticationService_AuthenticationToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_GetTokenInfoResponse class]]) {
    return NO;
  }
  AuthenticationService_GetTokenInfoResponse *other = (AuthenticationService_GetTokenInfoResponse *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (AromaAuthentication_AuthenticationToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (AromaAuthentication_AuthenticationToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaAuthentication_AuthenticationToken *fieldValue = [[AromaAuthentication_AuthenticationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTokenInfoResponse"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_GetTokenInfoResponse("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_InvalidateTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.multipleTokens = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithToken: (AuthenticationService_AuthenticationToken) token multipleTokens: (NSMutableArray *) multipleTokens belongingTo: (AuthenticationService_uuid) belongingTo
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __multipleTokens = [multipleTokens retain_stub];
  __multipleTokens_isset = YES;
  __belongingTo = [belongingTo retain_stub];
  __belongingTo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"multipleTokens"])
  {
    __multipleTokens = [[decoder decodeObjectForKey: @"multipleTokens"] retain_stub];
    __multipleTokens_isset = YES;
  }
  if ([decoder containsValueForKey: @"belongingTo"])
  {
    __belongingTo = [[decoder decodeObjectForKey: @"belongingTo"] retain_stub];
    __belongingTo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__multipleTokens_isset)
  {
    [encoder encodeObject: __multipleTokens forKey: @"multipleTokens"];
  }
  if (__belongingTo_isset)
  {
    [encoder encodeObject: __belongingTo forKey: @"belongingTo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __multipleTokens_isset ? 2654435761 : 0;
  if (__multipleTokens_isset)
  {
    hash = (hash * 31) ^ [__multipleTokens hash];
  }
  hash = (hash * 31) ^ __belongingTo_isset ? 2654435761 : 0;
  if (__belongingTo_isset)
  {
    hash = (hash * 31) ^ [__belongingTo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_InvalidateTokenRequest class]]) {
    return NO;
  }
  AuthenticationService_InvalidateTokenRequest *other = (AuthenticationService_InvalidateTokenRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__multipleTokens_isset != other->__multipleTokens_isset) ||
      (__multipleTokens_isset && ((__multipleTokens || other->__multipleTokens) && ![__multipleTokens isEqual:other->__multipleTokens]))) {
    return NO;
  }
  if ((__belongingTo_isset != other->__belongingTo_isset) ||
      (__belongingTo_isset && ((__belongingTo || other->__belongingTo) && ![__belongingTo isEqual:other->__belongingTo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__multipleTokens release_stub];
  [__belongingTo release_stub];
  [super dealloc_stub];
}

- (AromaAuthentication_AuthenticationToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (AromaAuthentication_AuthenticationToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSMutableArray *) multipleTokens {
  return [[__multipleTokens retain_stub] autorelease_stub];
}

- (void) setMultipleTokens: (NSMutableArray *) multipleTokens {
  [multipleTokens retain_stub];
  [__multipleTokens release_stub];
  __multipleTokens = multipleTokens;
  __multipleTokens_isset = YES;
}

- (BOOL) multipleTokensIsSet {
  return __multipleTokens_isset;
}

- (void) unsetMultipleTokens {
  [__multipleTokens release_stub];
  __multipleTokens = nil;
  __multipleTokens_isset = NO;
}

- (NSString *) belongingTo {
  return [[__belongingTo retain_stub] autorelease_stub];
}

- (void) setBelongingTo: (NSString *) belongingTo {
  [belongingTo retain_stub];
  [__belongingTo release_stub];
  __belongingTo = belongingTo;
  __belongingTo_isset = YES;
}

- (BOOL) belongingToIsSet {
  return __belongingTo_isset;
}

- (void) unsetBelongingTo {
  [__belongingTo release_stub];
  __belongingTo = nil;
  __belongingTo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaAuthentication_AuthenticationToken *fieldValue = [[AromaAuthentication_AuthenticationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            AromaAuthentication_AuthenticationToken *_elem2 = [[AromaAuthentication_AuthenticationToken alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setMultipleTokens: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBelongingTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InvalidateTokenRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__multipleTokens_isset) {
    if (__multipleTokens != nil) {
      [outProtocol writeFieldBeginWithName: @"multipleTokens" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__multipleTokens count]];
        int idx4;
        for (idx4 = 0; idx4 < [__multipleTokens count]; idx4++)
        {
          [[__multipleTokens objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__belongingTo_isset) {
    if (__belongingTo != nil) {
      [outProtocol writeFieldBeginWithName: @"belongingTo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __belongingTo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_InvalidateTokenRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",multipleTokens:"];
  [ms appendFormat: @"%@", __multipleTokens];
  [ms appendString: @",belongingTo:"];
  [ms appendFormat: @"\"%@\"", __belongingTo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_InvalidateTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Operation completed successfully";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_InvalidateTokenResponse class]]) {
    return NO;
  }
  AuthenticationService_InvalidateTokenResponse *other = (AuthenticationService_InvalidateTokenResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InvalidateTokenResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_InvalidateTokenResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_VerifyTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTokenId: (NSString *) tokenId ownerId: (NSString *) ownerId
{
  self = [super init];
  __tokenId = [tokenId retain_stub];
  __tokenId_isset = YES;
  __ownerId = [ownerId retain_stub];
  __ownerId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tokenId"])
  {
    __tokenId = [[decoder decodeObjectForKey: @"tokenId"] retain_stub];
    __tokenId_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownerId"])
  {
    __ownerId = [[decoder decodeObjectForKey: @"ownerId"] retain_stub];
    __ownerId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tokenId_isset)
  {
    [encoder encodeObject: __tokenId forKey: @"tokenId"];
  }
  if (__ownerId_isset)
  {
    [encoder encodeObject: __ownerId forKey: @"ownerId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tokenId_isset ? 2654435761 : 0;
  if (__tokenId_isset)
  {
    hash = (hash * 31) ^ [__tokenId hash];
  }
  hash = (hash * 31) ^ __ownerId_isset ? 2654435761 : 0;
  if (__ownerId_isset)
  {
    hash = (hash * 31) ^ [__ownerId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_VerifyTokenRequest class]]) {
    return NO;
  }
  AuthenticationService_VerifyTokenRequest *other = (AuthenticationService_VerifyTokenRequest *)anObject;
  if ((__tokenId_isset != other->__tokenId_isset) ||
      (__tokenId_isset && ((__tokenId || other->__tokenId) && ![__tokenId isEqual:other->__tokenId]))) {
    return NO;
  }
  if ((__ownerId_isset != other->__ownerId_isset) ||
      (__ownerId_isset && ((__ownerId || other->__ownerId) && ![__ownerId isEqual:other->__ownerId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tokenId release_stub];
  [__ownerId release_stub];
  [super dealloc_stub];
}

- (NSString *) tokenId {
  return [[__tokenId retain_stub] autorelease_stub];
}

- (void) setTokenId: (NSString *) tokenId {
  [tokenId retain_stub];
  [__tokenId release_stub];
  __tokenId = tokenId;
  __tokenId_isset = YES;
}

- (BOOL) tokenIdIsSet {
  return __tokenId_isset;
}

- (void) unsetTokenId {
  [__tokenId release_stub];
  __tokenId = nil;
  __tokenId_isset = NO;
}

- (NSString *) ownerId {
  return [[__ownerId retain_stub] autorelease_stub];
}

- (void) setOwnerId: (NSString *) ownerId {
  [ownerId retain_stub];
  [__ownerId release_stub];
  __ownerId = ownerId;
  __ownerId_isset = YES;
}

- (BOOL) ownerIdIsSet {
  return __ownerId_isset;
}

- (void) unsetOwnerId {
  [__ownerId release_stub];
  __ownerId = nil;
  __ownerId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTokenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwnerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyTokenRequest"];
  if (__tokenId_isset) {
    if (__tokenId != nil) {
      [outProtocol writeFieldBeginWithName: @"tokenId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tokenId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ownerId_isset) {
    if (__ownerId != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __ownerId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_VerifyTokenRequest("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", __tokenId];
  [ms appendString: @",ownerId:"];
  [ms appendFormat: @"\"%@\"", __ownerId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_VerifyTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_VerifyTokenResponse class]]) {
    return NO;
  }
  AuthenticationService_VerifyTokenResponse *other = (AuthenticationService_VerifyTokenResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyTokenResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_VerifyTokenResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static AuthenticationService_int AuthenticationService_SERVICE_PORT = 7026;
static AromaEndpoint_TcpEndpoint * AuthenticationService_PRODUCTION_ENDPOINT;
static AromaEndpoint_TcpEndpoint * AuthenticationService_BETA_ENDPOINT;
static Aroma_LengthOfTime * AuthenticationService_DEFAULT_TOKEN_LIFETIME;

@implementation AuthenticationService_AuthenticationServiceConstants
+ (void) initialize {
  AuthenticationService_PRODUCTION_ENDPOINT = [[AromaEndpoint_TcpEndpoint alloc] init];
  [AuthenticationService_PRODUCTION_ENDPOINT setHostname:@"authentication-srv.aroma.tech"];
  [AuthenticationService_PRODUCTION_ENDPOINT setPort:7026];

;
  AuthenticationService_BETA_ENDPOINT = [[AromaEndpoint_TcpEndpoint alloc] init];
  [AuthenticationService_BETA_ENDPOINT setHostname:@"authentication-srv.beta.aroma.tech"];
  [AuthenticationService_BETA_ENDPOINT setPort:7026];

;
  AuthenticationService_DEFAULT_TOKEN_LIFETIME = [[Aroma_LengthOfTime alloc] init];
  [AuthenticationService_DEFAULT_TOKEN_LIFETIME setValue:90];
  [AuthenticationService_DEFAULT_TOKEN_LIFETIME setUnit:5];

;
}
+ (AuthenticationService_int) SERVICE_PORT{
  return AuthenticationService_SERVICE_PORT;
}
+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT{
  return AuthenticationService_PRODUCTION_ENDPOINT;
}
+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT{
  return AuthenticationService_BETA_ENDPOINT;
}
+ (Aroma_LengthOfTime *) DEFAULT_TOKEN_LIFETIME{
  return AuthenticationService_DEFAULT_TOKEN_LIFETIME;
}
@end

@interface AuthenticationService_getApiVersion_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation AuthenticationService_getApiVersion_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_getApiVersion_args class]]) {
    return NO;
  }
  AuthenticationService_getApiVersion_args *other = (AuthenticationService_getApiVersion_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getApiVersion_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_getApiVersion_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_GetApiVersion_result : NSObject <TBase, NSCoding> {
  double __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) double success;
#endif

- (id) init;
- (id) initWithSuccess: (double) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (double) success;
- (void) setSuccess: (double) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AuthenticationService_GetApiVersion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (double) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeDoubleForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeDouble: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_GetApiVersion_result class]]) {
    return NO;
  }
  AuthenticationService_GetApiVersion_result *other = (AuthenticationService_GetApiVersion_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) success {
  return __success;
}

- (void) setSuccess: (double) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApiVersion_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_DOUBLE fieldID: 0];
    [outProtocol writeDouble: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_GetApiVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_createToken_args : NSObject <TBase, NSCoding> {
  AuthenticationService_CreateTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AuthenticationService_CreateTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AuthenticationService_CreateTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_CreateTokenRequest *) request;
- (void) setRequest: (AuthenticationService_CreateTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AuthenticationService_createToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AuthenticationService_CreateTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_createToken_args class]]) {
    return NO;
  }
  AuthenticationService_createToken_args *other = (AuthenticationService_createToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_CreateTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AuthenticationService_CreateTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_CreateTokenRequest *fieldValue = [[AuthenticationService_CreateTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"createToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_createToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_CreateToken_result : NSObject <TBase, NSCoding> {
  AuthenticationService_CreateTokenResponse * __success;
  AuthenticationService_OperationFailedException __ex1;
  AuthenticationService_InvalidArgumentException __ex2;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthenticationService_CreateTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) AuthenticationService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) AuthenticationService_InvalidArgumentException ex2;
#endif

- (id) init;
- (id) initWithSuccess: (AuthenticationService_CreateTokenResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidArgumentException) ex2;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_CreateTokenResponse *) success;
- (void) setSuccess: (AuthenticationService_CreateTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_OperationFailedException) ex1;
- (void) setEx1: (AuthenticationService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidArgumentException) ex2;
- (void) setEx2: (AuthenticationService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

@end

@implementation AuthenticationService_CreateToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthenticationService_CreateTokenResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidArgumentException) ex2
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_CreateToken_result class]]) {
    return NO;
  }
  AuthenticationService_CreateToken_result *other = (AuthenticationService_CreateToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_CreateTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthenticationService_CreateTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AromaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (AromaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_CreateTokenResponse *fieldValue = [[AuthenticationService_CreateTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_CreateToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_getTokenInfo_args : NSObject <TBase, NSCoding> {
  AuthenticationService_GetTokenInfoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AuthenticationService_GetTokenInfoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AuthenticationService_GetTokenInfoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_GetTokenInfoRequest *) request;
- (void) setRequest: (AuthenticationService_GetTokenInfoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AuthenticationService_getTokenInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AuthenticationService_GetTokenInfoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_getTokenInfo_args class]]) {
    return NO;
  }
  AuthenticationService_getTokenInfo_args *other = (AuthenticationService_getTokenInfo_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_GetTokenInfoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AuthenticationService_GetTokenInfoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_GetTokenInfoRequest *fieldValue = [[AuthenticationService_GetTokenInfoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTokenInfo_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_getTokenInfo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_GetTokenInfo_result : NSObject <TBase, NSCoding> {
  AuthenticationService_GetTokenInfoResponse * __success;
  AuthenticationService_OperationFailedException __ex1;
  AuthenticationService_InvalidTokenException __ex2;
  AuthenticationService_InvalidArgumentException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthenticationService_GetTokenInfoResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) AuthenticationService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) AuthenticationService_InvalidTokenException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) AuthenticationService_InvalidArgumentException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (AuthenticationService_GetTokenInfoResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidTokenException) ex2 ex3: (AuthenticationService_InvalidArgumentException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_GetTokenInfoResponse *) success;
- (void) setSuccess: (AuthenticationService_GetTokenInfoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_OperationFailedException) ex1;
- (void) setEx1: (AuthenticationService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidTokenException) ex2;
- (void) setEx2: (AuthenticationService_InvalidTokenException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidArgumentException) ex3;
- (void) setEx3: (AuthenticationService_InvalidArgumentException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation AuthenticationService_GetTokenInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthenticationService_GetTokenInfoResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidTokenException) ex2 ex3: (AuthenticationService_InvalidArgumentException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_GetTokenInfo_result class]]) {
    return NO;
  }
  AuthenticationService_GetTokenInfo_result *other = (AuthenticationService_GetTokenInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_GetTokenInfoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthenticationService_GetTokenInfoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AromaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (AromaException_InvalidTokenException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (AromaException_InvalidTokenException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (AromaException_InvalidArgumentException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (AromaException_InvalidArgumentException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_GetTokenInfoResponse *fieldValue = [[AuthenticationService_GetTokenInfoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTokenInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_GetTokenInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_invalidateToken_args : NSObject <TBase, NSCoding> {
  AuthenticationService_InvalidateTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AuthenticationService_InvalidateTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AuthenticationService_InvalidateTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidateTokenRequest *) request;
- (void) setRequest: (AuthenticationService_InvalidateTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AuthenticationService_invalidateToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AuthenticationService_InvalidateTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_invalidateToken_args class]]) {
    return NO;
  }
  AuthenticationService_invalidateToken_args *other = (AuthenticationService_invalidateToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_InvalidateTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AuthenticationService_InvalidateTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_InvalidateTokenRequest *fieldValue = [[AuthenticationService_InvalidateTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"invalidateToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_invalidateToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_InvalidateToken_result : NSObject <TBase, NSCoding> {
  AuthenticationService_InvalidateTokenResponse * __success;
  AuthenticationService_OperationFailedException __ex1;
  AuthenticationService_InvalidTokenException __ex2;
  AuthenticationService_InvalidArgumentException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthenticationService_InvalidateTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) AuthenticationService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) AuthenticationService_InvalidTokenException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) AuthenticationService_InvalidArgumentException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (AuthenticationService_InvalidateTokenResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidTokenException) ex2 ex3: (AuthenticationService_InvalidArgumentException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidateTokenResponse *) success;
- (void) setSuccess: (AuthenticationService_InvalidateTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_OperationFailedException) ex1;
- (void) setEx1: (AuthenticationService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidTokenException) ex2;
- (void) setEx2: (AuthenticationService_InvalidTokenException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidArgumentException) ex3;
- (void) setEx3: (AuthenticationService_InvalidArgumentException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation AuthenticationService_InvalidateToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthenticationService_InvalidateTokenResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidTokenException) ex2 ex3: (AuthenticationService_InvalidArgumentException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_InvalidateToken_result class]]) {
    return NO;
  }
  AuthenticationService_InvalidateToken_result *other = (AuthenticationService_InvalidateToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_InvalidateTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthenticationService_InvalidateTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AromaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (AromaException_InvalidTokenException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (AromaException_InvalidTokenException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (AromaException_InvalidArgumentException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (AromaException_InvalidArgumentException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_InvalidateTokenResponse *fieldValue = [[AuthenticationService_InvalidateTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InvalidateToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_InvalidateToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_verifyToken_args : NSObject <TBase, NSCoding> {
  AuthenticationService_VerifyTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AuthenticationService_VerifyTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AuthenticationService_VerifyTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_VerifyTokenRequest *) request;
- (void) setRequest: (AuthenticationService_VerifyTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AuthenticationService_verifyToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AuthenticationService_VerifyTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_verifyToken_args class]]) {
    return NO;
  }
  AuthenticationService_verifyToken_args *other = (AuthenticationService_verifyToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_VerifyTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AuthenticationService_VerifyTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_VerifyTokenRequest *fieldValue = [[AuthenticationService_VerifyTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"verifyToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_verifyToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticationService_VerifyToken_result : NSObject <TBase, NSCoding> {
  AuthenticationService_VerifyTokenResponse * __success;
  AuthenticationService_OperationFailedException __ex1;
  AuthenticationService_InvalidTokenException __ex2;
  AuthenticationService_InvalidArgumentException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthenticationService_VerifyTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) AuthenticationService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) AuthenticationService_InvalidTokenException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) AuthenticationService_InvalidArgumentException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (AuthenticationService_VerifyTokenResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidTokenException) ex2 ex3: (AuthenticationService_InvalidArgumentException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthenticationService_VerifyTokenResponse *) success;
- (void) setSuccess: (AuthenticationService_VerifyTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_OperationFailedException) ex1;
- (void) setEx1: (AuthenticationService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidTokenException) ex2;
- (void) setEx2: (AuthenticationService_InvalidTokenException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (AuthenticationService_InvalidArgumentException) ex3;
- (void) setEx3: (AuthenticationService_InvalidArgumentException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation AuthenticationService_VerifyToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthenticationService_VerifyTokenResponse *) success ex1: (AuthenticationService_OperationFailedException) ex1 ex2: (AuthenticationService_InvalidTokenException) ex2 ex3: (AuthenticationService_InvalidArgumentException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticationService_VerifyToken_result class]]) {
    return NO;
  }
  AuthenticationService_VerifyToken_result *other = (AuthenticationService_VerifyToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (AuthenticationService_VerifyTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthenticationService_VerifyTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AromaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (AromaException_InvalidTokenException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (AromaException_InvalidTokenException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (AromaException_InvalidArgumentException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (AromaException_InvalidArgumentException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthenticationService_VerifyTokenResponse *fieldValue = [[AuthenticationService_VerifyTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationService_VerifyToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationService_AuthenticationServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getApiVersion
{
  [outProtocol writeMessageBeginWithName: @"getApiVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getApiVersion_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (double) recv_getApiVersion
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthenticationService_GetApiVersion_result * result = [[[AuthenticationService_GetApiVersion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getApiVersion failed: unknown result"];
}

- (double) getApiVersion
{
  [self send_getApiVersion];
  [[outProtocol transport] flush];
  return [self recv_getApiVersion];
}

- (void) send_createToken: (AuthenticationService_CreateTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"createToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"createToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AuthenticationService_CreateTokenResponse *) recv_createToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthenticationService_CreateToken_result * result = [[[AuthenticationService_CreateToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"createToken failed: unknown result"];
}

- (AuthenticationService_CreateTokenResponse *) createToken: (AuthenticationService_CreateTokenRequest *) request
{
  [self send_createToken : request];
  [[outProtocol transport] flush];
  return [self recv_createToken];
}

- (void) send_getTokenInfo: (AuthenticationService_GetTokenInfoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getTokenInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTokenInfo_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AuthenticationService_GetTokenInfoResponse *) recv_getTokenInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthenticationService_GetTokenInfo_result * result = [[[AuthenticationService_GetTokenInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTokenInfo failed: unknown result"];
}

- (AuthenticationService_GetTokenInfoResponse *) getTokenInfo: (AuthenticationService_GetTokenInfoRequest *) request
{
  [self send_getTokenInfo : request];
  [[outProtocol transport] flush];
  return [self recv_getTokenInfo];
}

- (void) send_invalidateToken: (AuthenticationService_InvalidateTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"invalidateToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"invalidateToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AuthenticationService_InvalidateTokenResponse *) recv_invalidateToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthenticationService_InvalidateToken_result * result = [[[AuthenticationService_InvalidateToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"invalidateToken failed: unknown result"];
}

- (AuthenticationService_InvalidateTokenResponse *) invalidateToken: (AuthenticationService_InvalidateTokenRequest *) request
{
  [self send_invalidateToken : request];
  [[outProtocol transport] flush];
  return [self recv_invalidateToken];
}

- (void) send_verifyToken: (AuthenticationService_VerifyTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"verifyToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"verifyToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AuthenticationService_VerifyTokenResponse *) recv_verifyToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthenticationService_VerifyToken_result * result = [[[AuthenticationService_VerifyToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"verifyToken failed: unknown result"];
}

- (AuthenticationService_VerifyTokenResponse *) verifyToken: (AuthenticationService_VerifyTokenRequest *) request
{
  [self send_verifyToken : request];
  [[outProtocol transport] flush];
  return [self recv_verifyToken];
}

@end

@implementation AuthenticationService_AuthenticationServiceProcessor

- (id) initWithAuthenticationService: (id <AuthenticationService_AuthenticationService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getApiVersion_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getApiVersion"];
}
{
  SEL s = @selector(process_createToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"createToken"];
}
{
  SEL s = @selector(process_getTokenInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getTokenInfo"];
}
{
  SEL s = @selector(process_invalidateToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"invalidateToken"];
}
{
  SEL s = @selector(process_verifyToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"verifyToken"];
}
return self;
}

- (id<AuthenticationService_AuthenticationService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getApiVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AuthenticationService_getApiVersion_args * args = [[AuthenticationService_getApiVersion_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthenticationService_GetApiVersion_result * result = [[AuthenticationService_GetApiVersion_result alloc] init];
[result setSuccess: [mService getApiVersion]];
[outProtocol writeMessageBeginWithName: @"getApiVersion"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_createToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AuthenticationService_createToken_args * args = [[AuthenticationService_createToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthenticationService_CreateToken_result * result = [[AuthenticationService_CreateToken_result alloc] init];
[result setSuccess: [mService createToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"createToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getTokenInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AuthenticationService_getTokenInfo_args * args = [[AuthenticationService_getTokenInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthenticationService_GetTokenInfo_result * result = [[AuthenticationService_GetTokenInfo_result alloc] init];
[result setSuccess: [mService getTokenInfo: [args request]]];
[outProtocol writeMessageBeginWithName: @"getTokenInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_invalidateToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AuthenticationService_invalidateToken_args * args = [[AuthenticationService_invalidateToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthenticationService_InvalidateToken_result * result = [[AuthenticationService_InvalidateToken_result alloc] init];
[result setSuccess: [mService invalidateToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"invalidateToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_verifyToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AuthenticationService_verifyToken_args * args = [[AuthenticationService_verifyToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthenticationService_VerifyToken_result * result = [[AuthenticationService_VerifyToken_result alloc] init];
[result setSuccess: [mService verifyToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"verifyToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end


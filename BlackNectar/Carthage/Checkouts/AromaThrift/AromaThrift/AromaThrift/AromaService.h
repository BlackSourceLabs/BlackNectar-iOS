/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Aroma.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Events.h"
#import "Exceptions.h"
#import "Reactions.h"

typedef Aroma_int AromaService_int;

typedef Aroma_long AromaService_long;

typedef Aroma_timestamp AromaService_timestamp;

typedef Aroma_uuid AromaService_uuid;

typedef AromaAuthentication_ApplicationToken * AromaService_ApplicationToken;

typedef AromaAuthentication_AuthenticationToken * AromaService_AuthenticationToken;

typedef AromaAuthentication_UserToken * AromaService_UserToken;

typedef Aroma_Application * AromaService_Application;

typedef Aroma_Image * AromaService_Image;

typedef int AromaService_Urgency;

typedef Aroma_User * AromaService_User;

typedef AromaChannels_AromaChannel * AromaService_AromaChannel;

typedef AromaChannels_MobileDevice * AromaService_MobileDevice;

typedef AromaEndpoint_Endpoint * AromaService_Endpoint;

typedef AromaEvents_HealthCheckFailed * AromaService_HealthCheckFailed;

typedef AromaReactions_Reaction * AromaService_Reaction;

typedef AromaException_AccountAlreadyExistsException * AromaService_AccountAlreadyExistsException;

typedef AromaException_ApplicationAlreadyRegisteredException * AromaService_ApplicationAlreadyRegisteredException;

typedef AromaException_ApplicationDoesNotExistException * AromaService_ApplicationDoesNotExistException;

typedef AromaException_ChannelDoesNotExistException * AromaService_ChannelDoesNotExistException;

typedef AromaException_CustomChannelUnreachableException * AromaService_CustomChannelUnreachableException;

typedef AromaException_DoesNotExistException * AromaService_DoesNotExistException;

typedef AromaException_InvalidArgumentException * AromaService_InvalidArgumentException;

typedef AromaException_InvalidCredentialsException * AromaService_InvalidCredentialsException;

typedef AromaException_InvalidTokenException * AromaService_InvalidTokenException;

typedef AromaException_MessageDoesNotExistException * AromaService_MessageDoesNotExistException;

typedef AromaException_OperationFailedException * AromaService_OperationFailedException;

typedef AromaException_UnauthorizedException * AromaService_UnauthorizedException;

typedef AromaException_UserDoesNotExistException * AromaService_UserDoesNotExistException;

@interface AromaService_SignInRequest : NSObject <TBase, NSCoding> {
  AromaAuthentication_Credentials * __credentials;
  NSString * __emailAddress;

  BOOL __credentials_isset;
  BOOL __emailAddress_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) AromaAuthentication_Credentials * credentials;
@property (nonatomic, retain, getter=emailAddress, setter=setEmailAddress:) NSString * emailAddress;
#endif

- (id) init;
- (id) initWithCredentials: (AromaAuthentication_Credentials *) credentials emailAddress: (NSString *) emailAddress;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaAuthentication_Credentials *) credentials;
- (void) setCredentials: (AromaAuthentication_Credentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) emailAddress;
- (void) setEmailAddress: (NSString *) emailAddress;
#endif
- (BOOL) emailAddressIsSet;

@end

@interface AromaService_SignInResponse : NSObject <TBase, NSCoding> {
  AromaService_UserToken __userToken;

  BOOL __userToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userToken, setter=setUserToken:) AromaService_UserToken userToken;
#endif

- (id) init;
- (id) initWithUserToken: (AromaService_UserToken) userToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) userToken;
- (void) setUserToken: (AromaService_UserToken) userToken;
#endif
- (BOOL) userTokenIsSet;

@end

@interface AromaService_SignUpRequest : NSObject <TBase, NSCoding> {
  NSString * __email;
  NSString * __name;
  NSString * __firstName;
  NSString * __middleName;
  NSString * __lastName;
  NSString * __username;
  AromaService_uuid __organizationId;
  AromaAuthentication_Credentials * __credentials;
  int __mainRole;
  AromaService_timestamp __birthDate;
  NSString * __githubProfile;
  AromaService_Image __profileImage;

  BOOL __email_isset;
  BOOL __name_isset;
  BOOL __firstName_isset;
  BOOL __middleName_isset;
  BOOL __lastName_isset;
  BOOL __username_isset;
  BOOL __organizationId_isset;
  BOOL __credentials_isset;
  BOOL __mainRole_isset;
  BOOL __birthDate_isset;
  BOOL __githubProfile_isset;
  BOOL __profileImage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=firstName, setter=setFirstName:) NSString * firstName;
@property (nonatomic, retain, getter=middleName, setter=setMiddleName:) NSString * middleName;
@property (nonatomic, retain, getter=lastName, setter=setLastName:) NSString * lastName;
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) AromaService_uuid organizationId;
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) AromaAuthentication_Credentials * credentials;
@property (nonatomic, getter=mainRole, setter=setMainRole:) int mainRole;
@property (nonatomic, getter=birthDate, setter=setBirthDate:) AromaService_timestamp birthDate;
@property (nonatomic, retain, getter=githubProfile, setter=setGithubProfile:) NSString * githubProfile;
@property (nonatomic, retain, getter=profileImage, setter=setProfileImage:) AromaService_Image profileImage;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email name: (NSString *) name firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName username: (NSString *) username organizationId: (AromaService_uuid) organizationId credentials: (AromaAuthentication_Credentials *) credentials mainRole: (int) mainRole birthDate: (AromaService_timestamp) birthDate githubProfile: (NSString *) githubProfile profileImage: (AromaService_Image) profileImage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) firstName;
- (void) setFirstName: (NSString *) firstName;
#endif
- (BOOL) firstNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) middleName;
- (void) setMiddleName: (NSString *) middleName;
#endif
- (BOOL) middleNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) lastName;
- (void) setLastName: (NSString *) lastName;
#endif
- (BOOL) lastNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) organizationId;
- (void) setOrganizationId: (AromaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

#if !__has_feature(objc_arc)
- (AromaAuthentication_Credentials *) credentials;
- (void) setCredentials: (AromaAuthentication_Credentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

#if !__has_feature(objc_arc)
- (int) mainRole;
- (void) setMainRole: (int) mainRole;
#endif
- (BOOL) mainRoleIsSet;

#if !__has_feature(objc_arc)
- (AromaService_timestamp) birthDate;
- (void) setBirthDate: (AromaService_timestamp) birthDate;
#endif
- (BOOL) birthDateIsSet;

#if !__has_feature(objc_arc)
- (NSString *) githubProfile;
- (void) setGithubProfile: (NSString *) githubProfile;
#endif
- (BOOL) githubProfileIsSet;

#if !__has_feature(objc_arc)
- (AromaService_Image) profileImage;
- (void) setProfileImage: (AromaService_Image) profileImage;
#endif
- (BOOL) profileImageIsSet;

@end

@interface AromaService_SignUpResponse : NSObject <TBase, NSCoding> {
  AromaService_UserToken __userToken;
  AromaAuthentication_AromaAccount * __account;
  AromaService_uuid __userId;

  BOOL __userToken_isset;
  BOOL __account_isset;
  BOOL __userId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userToken, setter=setUserToken:) AromaService_UserToken userToken;
@property (nonatomic, retain, getter=account, setter=setAccount:) AromaAuthentication_AromaAccount * account;
@property (nonatomic, retain, getter=userId, setter=setUserId:) AromaService_uuid userId;
#endif

- (id) init;
- (id) initWithUserToken: (AromaService_UserToken) userToken account: (AromaAuthentication_AromaAccount *) account userId: (AromaService_uuid) userId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) userToken;
- (void) setUserToken: (AromaService_UserToken) userToken;
#endif
- (BOOL) userTokenIsSet;

#if !__has_feature(objc_arc)
- (AromaAuthentication_AromaAccount *) account;
- (void) setAccount: (AromaAuthentication_AromaAccount *) account;
#endif
- (BOOL) accountIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) userId;
- (void) setUserId: (AromaService_uuid) userId;
#endif
- (BOOL) userIdIsSet;

@end

@interface AromaService_CheckExistsRequest : NSObject <TBase, NSCoding> {
  NSString * __emailAddress;

  BOOL __emailAddress_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=emailAddress, setter=setEmailAddress:) NSString * emailAddress;
#endif

- (id) init;
- (id) initWithEmailAddress: (NSString *) emailAddress;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) emailAddress;
- (void) setEmailAddress: (NSString *) emailAddress;
#endif
- (BOOL) emailAddressIsSet;

@end

@interface AromaService_CheckExistsResponse : NSObject <TBase, NSCoding> {
  BOOL __exists;
  NSString * __message;

  BOOL __exists_isset;
  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=exists, setter=setExists:) BOOL exists;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithExists: (BOOL) exists message: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) exists;
- (void) setExists: (BOOL) exists;
#endif
- (BOOL) existsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface AromaService_GetUserInfoRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __userId;
  NSString * __email;

  BOOL __token_isset;
  BOOL __userId_isset;
  BOOL __email_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=userId, setter=setUserId:) AromaService_uuid userId;
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token userId: (AromaService_uuid) userId email: (NSString *) email;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) userId;
- (void) setUserId: (AromaService_uuid) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

@end

@interface AromaService_GetUserInfoResponse : NSObject <TBase, NSCoding> {
  AromaService_User __userInfo;

  BOOL __userInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userInfo, setter=setUserInfo:) AromaService_User userInfo;
#endif

- (id) init;
- (id) initWithUserInfo: (AromaService_User) userInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_User) userInfo;
- (void) setUserInfo: (AromaService_User) userInfo;
#endif
- (BOOL) userInfoIsSet;

@end

@interface AromaService_GetApplicationInfoRequest : NSObject <TBase, NSCoding> {
  AromaService_AuthenticationToken __token;
  AromaService_uuid __applicationId;
  BOOL __includeFollowingInfo;

  BOOL __token_isset;
  BOOL __applicationId_isset;
  BOOL __includeFollowingInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_AuthenticationToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
@property (nonatomic, getter=includeFollowingInfo, setter=setIncludeFollowingInfo:) BOOL includeFollowingInfo;
#endif

- (id) init;
- (id) initWithToken: (AromaService_AuthenticationToken) token applicationId: (AromaService_uuid) applicationId includeFollowingInfo: (BOOL) includeFollowingInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_AuthenticationToken) token;
- (void) setToken: (AromaService_AuthenticationToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) includeFollowingInfo;
- (void) setIncludeFollowingInfo: (BOOL) includeFollowingInfo;
#endif
- (BOOL) includeFollowingInfoIsSet;

@end

@interface AromaService_GetApplicationInfoResponse : NSObject <TBase, NSCoding> {
  AromaService_Application __applicationInfo;

  BOOL __applicationInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationInfo, setter=setApplicationInfo:) AromaService_Application applicationInfo;
#endif

- (id) init;
- (id) initWithApplicationInfo: (AromaService_Application) applicationInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_Application) applicationInfo;
- (void) setApplicationInfo: (AromaService_Application) applicationInfo;
#endif
- (BOOL) applicationInfoIsSet;

@end

@interface AromaService_GetApplicationsOwnedByRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __userId;

  BOOL __token_isset;
  BOOL __userId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=userId, setter=setUserId:) AromaService_uuid userId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token userId: (AromaService_uuid) userId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) userId;
- (void) setUserId: (AromaService_uuid) userId;
#endif
- (BOOL) userIdIsSet;

@end

@interface AromaService_GetApplicationsOwnedByResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __applications;

  BOOL __applications_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applications, setter=setApplications:) NSMutableArray * applications;
#endif

- (id) init;
- (id) initWithApplications: (NSMutableArray *) applications;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) applications;
- (void) setApplications: (NSMutableArray *) applications;
#endif
- (BOOL) applicationsIsSet;

@end

@interface AromaService_ProvisionApplicationRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  NSString * __applicationName;
  int __programmingLanguage;
  AromaService_uuid __organizationId;
  AromaService_Image __icon;
  NSMutableSet * __owners;
  NSString * __applicationDescription;
  int __tier;

  BOOL __token_isset;
  BOOL __applicationName_isset;
  BOOL __programmingLanguage_isset;
  BOOL __organizationId_isset;
  BOOL __icon_isset;
  BOOL __owners_isset;
  BOOL __applicationDescription_isset;
  BOOL __tier_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, getter=programmingLanguage, setter=setProgrammingLanguage:) int programmingLanguage;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) AromaService_uuid organizationId;
@property (nonatomic, retain, getter=icon, setter=setIcon:) AromaService_Image icon;
@property (nonatomic, retain, getter=owners, setter=setOwners:) NSMutableSet * owners;
@property (nonatomic, retain, getter=applicationDescription, setter=setApplicationDescription:) NSString * applicationDescription;
@property (nonatomic, getter=tier, setter=setTier:) int tier;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationName: (NSString *) applicationName programmingLanguage: (int) programmingLanguage organizationId: (AromaService_uuid) organizationId icon: (AromaService_Image) icon owners: (NSMutableSet *) owners applicationDescription: (NSString *) applicationDescription tier: (int) tier;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (int) programmingLanguage;
- (void) setProgrammingLanguage: (int) programmingLanguage;
#endif
- (BOOL) programmingLanguageIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) organizationId;
- (void) setOrganizationId: (AromaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_Image) icon;
- (void) setIcon: (AromaService_Image) icon;
#endif
- (BOOL) iconIsSet;

#if !__has_feature(objc_arc)
- (NSMutableSet *) owners;
- (void) setOwners: (NSMutableSet *) owners;
#endif
- (BOOL) ownersIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationDescription;
- (void) setApplicationDescription: (NSString *) applicationDescription;
#endif
- (BOOL) applicationDescriptionIsSet;

#if !__has_feature(objc_arc)
- (int) tier;
- (void) setTier: (int) tier;
#endif
- (BOOL) tierIsSet;

@end

@interface AromaService_ProvisionApplicationResponse : NSObject <TBase, NSCoding> {
  AromaService_ApplicationToken __applicationToken;
  AromaService_Application __applicationInfo;

  BOOL __applicationToken_isset;
  BOOL __applicationInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) AromaService_ApplicationToken applicationToken;
@property (nonatomic, retain, getter=applicationInfo, setter=setApplicationInfo:) AromaService_Application applicationInfo;
#endif

- (id) init;
- (id) initWithApplicationToken: (AromaService_ApplicationToken) applicationToken applicationInfo: (AromaService_Application) applicationInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_ApplicationToken) applicationToken;
- (void) setApplicationToken: (AromaService_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_Application) applicationInfo;
- (void) setApplicationInfo: (AromaService_Application) applicationInfo;
#endif
- (BOOL) applicationInfoIsSet;

@end

@interface AromaService_DeleteApplicationRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface AromaService_DeleteApplicationResponse : NSObject <TBase, NSCoding> {
  NSString * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface AromaService_UpdateApplicationRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_Application __updatedApplication;

  BOOL __token_isset;
  BOOL __updatedApplication_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=updatedApplication, setter=setUpdatedApplication:) AromaService_Application updatedApplication;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token updatedApplication: (AromaService_Application) updatedApplication;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_Application) updatedApplication;
- (void) setUpdatedApplication: (AromaService_Application) updatedApplication;
#endif
- (BOOL) updatedApplicationIsSet;

@end

@interface AromaService_UpdateApplicationResponse : NSObject <TBase, NSCoding> {
  AromaService_Application __application;

  BOOL __application_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=application, setter=setApplication:) AromaService_Application application;
#endif

- (id) init;
- (id) initWithApplication: (AromaService_Application) application;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_Application) application;
- (void) setApplication: (AromaService_Application) application;
#endif
- (BOOL) applicationIsSet;

@end

@interface AromaService_SearchForApplicationsRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  NSString * __applicationName;
  AromaService_uuid __organizationId;

  BOOL __token_isset;
  BOOL __applicationName_isset;
  BOOL __organizationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) AromaService_uuid organizationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationName: (NSString *) applicationName organizationId: (AromaService_uuid) organizationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) organizationId;
- (void) setOrganizationId: (AromaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

@end

@interface AromaService_SearchForApplicationsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __applications;

  BOOL __applications_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applications, setter=setApplications:) NSMutableArray * applications;
#endif

- (id) init;
- (id) initWithApplications: (NSMutableArray *) applications;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) applications;
- (void) setApplications: (NSMutableArray *) applications;
#endif
- (BOOL) applicationsIsSet;

@end

@interface AromaService_RecreateApplicationTokenRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface AromaService_RecreateApplicationTokenResponse : NSObject <TBase, NSCoding> {
  AromaService_ApplicationToken __applicationToken;

  BOOL __applicationToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) AromaService_ApplicationToken applicationToken;
#endif

- (id) init;
- (id) initWithApplicationToken: (AromaService_ApplicationToken) applicationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_ApplicationToken) applicationToken;
- (void) setApplicationToken: (AromaService_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

@end

@interface AromaService_RenewApplicationTokenRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  Aroma_LengthOfTime * __newLifetime;
  AromaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __newLifetime_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=newLifetime, setter=setNewLifetime:) Aroma_LengthOfTime * newLifetime;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token newLifetime: (Aroma_LengthOfTime *) newLifetime applicationId: (AromaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (Aroma_LengthOfTime *) newLifetime;
- (void) setNewLifetime: (Aroma_LengthOfTime *) newLifetime;
#endif
- (BOOL) newLifetimeIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface AromaService_RenewApplicationTokenResponse : NSObject <TBase, NSCoding> {
  AromaService_ApplicationToken __applicationToken;

  BOOL __applicationToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) AromaService_ApplicationToken applicationToken;
#endif

- (id) init;
- (id) initWithApplicationToken: (AromaService_ApplicationToken) applicationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_ApplicationToken) applicationToken;
- (void) setApplicationToken: (AromaService_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

@end

@interface AromaService_GetApplicationsFollowedByRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __userId;

  BOOL __token_isset;
  BOOL __userId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=userId, setter=setUserId:) AromaService_uuid userId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token userId: (AromaService_uuid) userId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) userId;
- (void) setUserId: (AromaService_uuid) userId;
#endif
- (BOOL) userIdIsSet;

@end

@interface AromaService_GetApplicationsFollowedByResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __applications;

  BOOL __applications_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applications, setter=setApplications:) NSMutableArray * applications;
#endif

- (id) init;
- (id) initWithApplications: (NSMutableArray *) applications;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) applications;
- (void) setApplications: (NSMutableArray *) applications;
#endif
- (BOOL) applicationsIsSet;

@end

@interface AromaService_FollowApplicationRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __applicationId;
  AromaService_uuid __organizationId;

  BOOL __token_isset;
  BOOL __applicationId_isset;
  BOOL __organizationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) AromaService_uuid organizationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId organizationId: (AromaService_uuid) organizationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) organizationId;
- (void) setOrganizationId: (AromaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

@end

@interface AromaService_FollowApplicationResponse : NSObject <TBase, NSCoding> {
  NSString * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface AromaService_UnfollowApplicationRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __applicationId;
  AromaService_uuid __organizationId;

  BOOL __token_isset;
  BOOL __applicationId_isset;
  BOOL __organizationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) AromaService_uuid organizationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId organizationId: (AromaService_uuid) organizationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) organizationId;
- (void) setOrganizationId: (AromaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

@end

@interface AromaService_UnfollowApplicationResponse : NSObject <TBase, NSCoding> {
  NSString * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface AromaService_GetApplicationMessagesRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __applicationId;
  AromaService_int __limit;

  BOOL __token_isset;
  BOOL __applicationId_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
@property (nonatomic, getter=limit, setter=setLimit:) AromaService_int limit;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId limit: (AromaService_int) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) limit;
- (void) setLimit: (AromaService_int) limit;
#endif
- (BOOL) limitIsSet;

@end

@interface AromaService_GetApplicationMessagesResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __messages;
  AromaService_int __totalMessagesMatching;

  BOOL __messages_isset;
  BOOL __totalMessagesMatching_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=messages, setter=setMessages:) NSMutableArray * messages;
@property (nonatomic, getter=totalMessagesMatching, setter=setTotalMessagesMatching:) AromaService_int totalMessagesMatching;
#endif

- (id) init;
- (id) initWithMessages: (NSMutableArray *) messages totalMessagesMatching: (AromaService_int) totalMessagesMatching;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messages;
- (void) setMessages: (NSMutableArray *) messages;
#endif
- (BOOL) messagesIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) totalMessagesMatching;
- (void) setTotalMessagesMatching: (AromaService_int) totalMessagesMatching;
#endif
- (BOOL) totalMessagesMatchingIsSet;

@end

@interface AromaService_GetFullMessageRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __messageId;
  AromaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __messageId_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=messageId, setter=setMessageId:) AromaService_uuid messageId;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token messageId: (AromaService_uuid) messageId applicationId: (AromaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) messageId;
- (void) setMessageId: (AromaService_uuid) messageId;
#endif
- (BOOL) messageIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface AromaService_GetFullMessageResponse : NSObject <TBase, NSCoding> {
  Aroma_Message * __fullMessage;

  BOOL __fullMessage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=fullMessage, setter=setFullMessage:) Aroma_Message * fullMessage;
#endif

- (id) init;
- (id) initWithFullMessage: (Aroma_Message *) fullMessage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Aroma_Message *) fullMessage;
- (void) setFullMessage: (Aroma_Message *) fullMessage;
#endif
- (BOOL) fullMessageIsSet;

@end

@interface AromaService_GetMediaRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __mediaId;
  Aroma_Dimension * __desiredThumbnailSize;

  BOOL __token_isset;
  BOOL __mediaId_isset;
  BOOL __desiredThumbnailSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=mediaId, setter=setMediaId:) AromaService_uuid mediaId;
@property (nonatomic, retain, getter=desiredThumbnailSize, setter=setDesiredThumbnailSize:) Aroma_Dimension * desiredThumbnailSize;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token mediaId: (AromaService_uuid) mediaId desiredThumbnailSize: (Aroma_Dimension *) desiredThumbnailSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) mediaId;
- (void) setMediaId: (AromaService_uuid) mediaId;
#endif
- (BOOL) mediaIdIsSet;

#if !__has_feature(objc_arc)
- (Aroma_Dimension *) desiredThumbnailSize;
- (void) setDesiredThumbnailSize: (Aroma_Dimension *) desiredThumbnailSize;
#endif
- (BOOL) desiredThumbnailSizeIsSet;

@end

@interface AromaService_GetMediaResponse : NSObject <TBase, NSCoding> {
  Aroma_Image * __image;

  BOOL __image_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=image, setter=setImage:) Aroma_Image * image;
#endif

- (id) init;
- (id) initWithImage: (Aroma_Image *) image;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Aroma_Image *) image;
- (void) setImage: (Aroma_Image *) image;
#endif
- (BOOL) imageIsSet;

@end

@interface AromaService_DeleteMessageRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __messageId;
  AromaService_uuid __applicationId;
  NSMutableArray * __messageIds;
  BOOL __deleteAll;

  BOOL __token_isset;
  BOOL __messageId_isset;
  BOOL __applicationId_isset;
  BOOL __messageIds_isset;
  BOOL __deleteAll_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=messageId, setter=setMessageId:) AromaService_uuid messageId;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
@property (nonatomic, retain, getter=messageIds, setter=setMessageIds:) NSMutableArray * messageIds;
@property (nonatomic, getter=deleteAll, setter=setDeleteAll:) BOOL deleteAll;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token messageId: (AromaService_uuid) messageId applicationId: (AromaService_uuid) applicationId messageIds: (NSMutableArray *) messageIds deleteAll: (BOOL) deleteAll;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) messageId;
- (void) setMessageId: (AromaService_uuid) messageId;
#endif
- (BOOL) messageIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messageIds;
- (void) setMessageIds: (NSMutableArray *) messageIds;
#endif
- (BOOL) messageIdsIsSet;

#if !__has_feature(objc_arc)
- (BOOL) deleteAll;
- (void) setDeleteAll: (BOOL) deleteAll;
#endif
- (BOOL) deleteAllIsSet;

@end

@interface AromaService_DeleteMessageResponse : NSObject <TBase, NSCoding> {
  AromaService_int __messagesDeleted;

  BOOL __messagesDeleted_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=messagesDeleted, setter=setMessagesDeleted:) AromaService_int messagesDeleted;
#endif

- (id) init;
- (id) initWithMessagesDeleted: (AromaService_int) messagesDeleted;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_int) messagesDeleted;
- (void) setMessagesDeleted: (AromaService_int) messagesDeleted;
#endif
- (BOOL) messagesDeletedIsSet;

@end

@interface AromaService_DismissMessageRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __messageId;
  AromaService_uuid __applicationId;
  NSMutableArray * __messageIds;
  BOOL __dismissAll;

  BOOL __token_isset;
  BOOL __messageId_isset;
  BOOL __applicationId_isset;
  BOOL __messageIds_isset;
  BOOL __dismissAll_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=messageId, setter=setMessageId:) AromaService_uuid messageId;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) AromaService_uuid applicationId;
@property (nonatomic, retain, getter=messageIds, setter=setMessageIds:) NSMutableArray * messageIds;
@property (nonatomic, getter=dismissAll, setter=setDismissAll:) BOOL dismissAll;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token messageId: (AromaService_uuid) messageId applicationId: (AromaService_uuid) applicationId messageIds: (NSMutableArray *) messageIds dismissAll: (BOOL) dismissAll;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) messageId;
- (void) setMessageId: (AromaService_uuid) messageId;
#endif
- (BOOL) messageIdIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) applicationId;
- (void) setApplicationId: (AromaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messageIds;
- (void) setMessageIds: (NSMutableArray *) messageIds;
#endif
- (BOOL) messageIdsIsSet;

#if !__has_feature(objc_arc)
- (BOOL) dismissAll;
- (void) setDismissAll: (BOOL) dismissAll;
#endif
- (BOOL) dismissAllIsSet;

@end

@interface AromaService_DismissMessageResponse : NSObject <TBase, NSCoding> {
  AromaService_int __messagesDismissed;

  BOOL __messagesDismissed_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=messagesDismissed, setter=setMessagesDismissed:) AromaService_int messagesDismissed;
#endif

- (id) init;
- (id) initWithMessagesDismissed: (AromaService_int) messagesDismissed;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_int) messagesDismissed;
- (void) setMessagesDismissed: (AromaService_int) messagesDismissed;
#endif
- (BOOL) messagesDismissedIsSet;

@end

@interface AromaService_GetInboxRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_int __limit;

  BOOL __token_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, getter=limit, setter=setLimit:) AromaService_int limit;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token limit: (AromaService_int) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) limit;
- (void) setLimit: (AromaService_int) limit;
#endif
- (BOOL) limitIsSet;

@end

@interface AromaService_GetInboxResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __messages;

  BOOL __messages_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=messages, setter=setMessages:) NSMutableArray * messages;
#endif

- (id) init;
- (id) initWithMessages: (NSMutableArray *) messages;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messages;
- (void) setMessages: (NSMutableArray *) messages;
#endif
- (BOOL) messagesIsSet;

@end

@interface AromaService_GetActivityRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_int __limit;

  BOOL __token_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, getter=limit, setter=setLimit:) AromaService_int limit;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token limit: (AromaService_int) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) limit;
- (void) setLimit: (AromaService_int) limit;
#endif
- (BOOL) limitIsSet;

@end

@interface AromaService_GetActivityResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __events;

  BOOL __events_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=events, setter=setEvents:) NSMutableArray * events;
#endif

- (id) init;
- (id) initWithEvents: (NSMutableArray *) events;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) events;
- (void) setEvents: (NSMutableArray *) events;
#endif
- (BOOL) eventsIsSet;

@end

@interface AromaService_DeleteActivityRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __eventId;
  BOOL __deleteAll;
  NSMutableArray * __multipleEventIds;

  BOOL __token_isset;
  BOOL __eventId_isset;
  BOOL __deleteAll_isset;
  BOOL __multipleEventIds_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=eventId, setter=setEventId:) AromaService_uuid eventId;
@property (nonatomic, getter=deleteAll, setter=setDeleteAll:) BOOL deleteAll;
@property (nonatomic, retain, getter=multipleEventIds, setter=setMultipleEventIds:) NSMutableArray * multipleEventIds;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token eventId: (AromaService_uuid) eventId deleteAll: (BOOL) deleteAll multipleEventIds: (NSMutableArray *) multipleEventIds;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) eventId;
- (void) setEventId: (AromaService_uuid) eventId;
#endif
- (BOOL) eventIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) deleteAll;
- (void) setDeleteAll: (BOOL) deleteAll;
#endif
- (BOOL) deleteAllIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) multipleEventIds;
- (void) setMultipleEventIds: (NSMutableArray *) multipleEventIds;
#endif
- (BOOL) multipleEventIdsIsSet;

@end

@interface AromaService_DeleteActivityResponse : NSObject <TBase, NSCoding> {
  AromaService_int __totalEventsDeleted;

  BOOL __totalEventsDeleted_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=totalEventsDeleted, setter=setTotalEventsDeleted:) AromaService_int totalEventsDeleted;
#endif

- (id) init;
- (id) initWithTotalEventsDeleted: (AromaService_int) totalEventsDeleted;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_int) totalEventsDeleted;
- (void) setTotalEventsDeleted: (AromaService_int) totalEventsDeleted;
#endif
- (BOOL) totalEventsDeletedIsSet;

@end

@interface AromaService_GetReactionsRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __forAppId;

  BOOL __token_isset;
  BOOL __forAppId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=forAppId, setter=setForAppId:) AromaService_uuid forAppId;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token forAppId: (AromaService_uuid) forAppId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) forAppId;
- (void) setForAppId: (AromaService_uuid) forAppId;
#endif
- (BOOL) forAppIdIsSet;

@end

@interface AromaService_GetReactionsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __reactions;

  BOOL __reactions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reactions, setter=setReactions:) NSMutableArray * reactions;
#endif

- (id) init;
- (id) initWithReactions: (NSMutableArray *) reactions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) reactions;
- (void) setReactions: (NSMutableArray *) reactions;
#endif
- (BOOL) reactionsIsSet;

@end

@interface AromaService_UpdateReactionsRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_uuid __forAppId;
  NSMutableArray * __reactions;

  BOOL __token_isset;
  BOOL __forAppId_isset;
  BOOL __reactions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=forAppId, setter=setForAppId:) AromaService_uuid forAppId;
@property (nonatomic, retain, getter=reactions, setter=setReactions:) NSMutableArray * reactions;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token forAppId: (AromaService_uuid) forAppId reactions: (NSMutableArray *) reactions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_uuid) forAppId;
- (void) setForAppId: (AromaService_uuid) forAppId;
#endif
- (BOOL) forAppIdIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) reactions;
- (void) setReactions: (NSMutableArray *) reactions;
#endif
- (BOOL) reactionsIsSet;

@end

@interface AromaService_UpdateReactionsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __reactions;

  BOOL __reactions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reactions, setter=setReactions:) NSMutableArray * reactions;
#endif

- (id) init;
- (id) initWithReactions: (NSMutableArray *) reactions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) reactions;
- (void) setReactions: (NSMutableArray *) reactions;
#endif
- (BOOL) reactionsIsSet;

@end

@interface AromaService_GetBuzzRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface AromaService_GetBuzzResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __freshUsers;
  NSMutableArray * __freshApplications;
  NSMutableArray * __failedHealthChecks;
  NSMutableArray * __generalEvents;

  BOOL __freshUsers_isset;
  BOOL __freshApplications_isset;
  BOOL __failedHealthChecks_isset;
  BOOL __generalEvents_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=freshUsers, setter=setFreshUsers:) NSMutableArray * freshUsers;
@property (nonatomic, retain, getter=freshApplications, setter=setFreshApplications:) NSMutableArray * freshApplications;
@property (nonatomic, retain, getter=failedHealthChecks, setter=setFailedHealthChecks:) NSMutableArray * failedHealthChecks;
@property (nonatomic, retain, getter=generalEvents, setter=setGeneralEvents:) NSMutableArray * generalEvents;
#endif

- (id) init;
- (id) initWithFreshUsers: (NSMutableArray *) freshUsers freshApplications: (NSMutableArray *) freshApplications failedHealthChecks: (NSMutableArray *) failedHealthChecks generalEvents: (NSMutableArray *) generalEvents;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) freshUsers;
- (void) setFreshUsers: (NSMutableArray *) freshUsers;
#endif
- (BOOL) freshUsersIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) freshApplications;
- (void) setFreshApplications: (NSMutableArray *) freshApplications;
#endif
- (BOOL) freshApplicationsIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) failedHealthChecks;
- (void) setFailedHealthChecks: (NSMutableArray *) failedHealthChecks;
#endif
- (BOOL) failedHealthChecksIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) generalEvents;
- (void) setGeneralEvents: (NSMutableArray *) generalEvents;
#endif
- (BOOL) generalEventsIsSet;

@end

@interface AromaService_GetDashboardRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface AromaService_GetDashboardResponse : NSObject <TBase, NSCoding> {
  AromaService_int __unreadMessageCount;
  AromaService_int __totalMessagesLastHour;
  AromaService_int __totalMessagesLast24hrs;
  NSMutableArray * __recentMessages;
  AromaService_int __numberOfLowUrgencyMessages;
  AromaService_int __numberOfMediumUrgencyMessages;
  AromaService_int __numberOfHighUrgencyMessages;

  BOOL __unreadMessageCount_isset;
  BOOL __totalMessagesLastHour_isset;
  BOOL __totalMessagesLast24hrs_isset;
  BOOL __recentMessages_isset;
  BOOL __numberOfLowUrgencyMessages_isset;
  BOOL __numberOfMediumUrgencyMessages_isset;
  BOOL __numberOfHighUrgencyMessages_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=unreadMessageCount, setter=setUnreadMessageCount:) AromaService_int unreadMessageCount;
@property (nonatomic, getter=totalMessagesLastHour, setter=setTotalMessagesLastHour:) AromaService_int totalMessagesLastHour;
@property (nonatomic, getter=totalMessagesLast24hrs, setter=setTotalMessagesLast24hrs:) AromaService_int totalMessagesLast24hrs;
@property (nonatomic, retain, getter=recentMessages, setter=setRecentMessages:) NSMutableArray * recentMessages;
@property (nonatomic, getter=numberOfLowUrgencyMessages, setter=setNumberOfLowUrgencyMessages:) AromaService_int numberOfLowUrgencyMessages;
@property (nonatomic, getter=numberOfMediumUrgencyMessages, setter=setNumberOfMediumUrgencyMessages:) AromaService_int numberOfMediumUrgencyMessages;
@property (nonatomic, getter=numberOfHighUrgencyMessages, setter=setNumberOfHighUrgencyMessages:) AromaService_int numberOfHighUrgencyMessages;
#endif

- (id) init;
- (id) initWithUnreadMessageCount: (AromaService_int) unreadMessageCount totalMessagesLastHour: (AromaService_int) totalMessagesLastHour totalMessagesLast24hrs: (AromaService_int) totalMessagesLast24hrs recentMessages: (NSMutableArray *) recentMessages numberOfLowUrgencyMessages: (AromaService_int) numberOfLowUrgencyMessages numberOfMediumUrgencyMessages: (AromaService_int) numberOfMediumUrgencyMessages numberOfHighUrgencyMessages: (AromaService_int) numberOfHighUrgencyMessages;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_int) unreadMessageCount;
- (void) setUnreadMessageCount: (AromaService_int) unreadMessageCount;
#endif
- (BOOL) unreadMessageCountIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) totalMessagesLastHour;
- (void) setTotalMessagesLastHour: (AromaService_int) totalMessagesLastHour;
#endif
- (BOOL) totalMessagesLastHourIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) totalMessagesLast24hrs;
- (void) setTotalMessagesLast24hrs: (AromaService_int) totalMessagesLast24hrs;
#endif
- (BOOL) totalMessagesLast24hrsIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) recentMessages;
- (void) setRecentMessages: (NSMutableArray *) recentMessages;
#endif
- (BOOL) recentMessagesIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) numberOfLowUrgencyMessages;
- (void) setNumberOfLowUrgencyMessages: (AromaService_int) numberOfLowUrgencyMessages;
#endif
- (BOOL) numberOfLowUrgencyMessagesIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) numberOfMediumUrgencyMessages;
- (void) setNumberOfMediumUrgencyMessages: (AromaService_int) numberOfMediumUrgencyMessages;
#endif
- (BOOL) numberOfMediumUrgencyMessagesIsSet;

#if !__has_feature(objc_arc)
- (AromaService_int) numberOfHighUrgencyMessages;
- (void) setNumberOfHighUrgencyMessages: (AromaService_int) numberOfHighUrgencyMessages;
#endif
- (BOOL) numberOfHighUrgencyMessagesIsSet;

@end

@interface AromaService_CheckIfDeviceIsRegisteredRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_MobileDevice __device;

  BOOL __token_isset;
  BOOL __device_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=device, setter=setDevice:) AromaService_MobileDevice device;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token device: (AromaService_MobileDevice) device;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_MobileDevice) device;
- (void) setDevice: (AromaService_MobileDevice) device;
#endif
- (BOOL) deviceIsSet;

@end

@interface AromaService_CheckIfDeviceIsRegisteredResponse : NSObject <TBase, NSCoding> {
  BOOL __isRegistered;

  BOOL __isRegistered_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=isRegistered, setter=setIsRegistered:) BOOL isRegistered;
#endif

- (id) init;
- (id) initWithIsRegistered: (BOOL) isRegistered;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) isRegistered;
- (void) setIsRegistered: (BOOL) isRegistered;
#endif
- (BOOL) isRegisteredIsSet;

@end

@interface AromaService_GetRegisteredDevicesRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface AromaService_GetRegisteredDevicesResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __devices;

  BOOL __devices_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=devices, setter=setDevices:) NSMutableArray * devices;
#endif

- (id) init;
- (id) initWithDevices: (NSMutableArray *) devices;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) devices;
- (void) setDevices: (NSMutableArray *) devices;
#endif
- (BOOL) devicesIsSet;

@end

@interface AromaService_RegisterDeviceRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_MobileDevice __device;

  BOOL __token_isset;
  BOOL __device_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=device, setter=setDevice:) AromaService_MobileDevice device;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token device: (AromaService_MobileDevice) device;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_MobileDevice) device;
- (void) setDevice: (AromaService_MobileDevice) device;
#endif
- (BOOL) deviceIsSet;

@end

@interface AromaService_RegisterDeviceResponse : NSObject <TBase, NSCoding> {
  NSString * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface AromaService_UnregisterDeviceRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_MobileDevice __device;

  BOOL __token_isset;
  BOOL __device_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=device, setter=setDevice:) AromaService_MobileDevice device;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token device: (AromaService_MobileDevice) device;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_MobileDevice) device;
- (void) setDevice: (AromaService_MobileDevice) device;
#endif
- (BOOL) deviceIsSet;

@end

@interface AromaService_UnregisterDeviceResponse : NSObject <TBase, NSCoding> {
  AromaService_MobileDevice __removedDevice;

  BOOL __removedDevice_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=removedDevice, setter=setRemovedDevice:) AromaService_MobileDevice removedDevice;
#endif

- (id) init;
- (id) initWithRemovedDevice: (AromaService_MobileDevice) removedDevice;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_MobileDevice) removedDevice;
- (void) setRemovedDevice: (AromaService_MobileDevice) removedDevice;
#endif
- (BOOL) removedDeviceIsSet;

@end

@interface AromaService_RegisterHealthCheckRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;
  AromaService_Endpoint __endpoint;

  BOOL __token_isset;
  BOOL __endpoint_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
@property (nonatomic, retain, getter=endpoint, setter=setEndpoint:) AromaService_Endpoint endpoint;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token endpoint: (AromaService_Endpoint) endpoint;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (AromaService_Endpoint) endpoint;
- (void) setEndpoint: (AromaService_Endpoint) endpoint;
#endif
- (BOOL) endpointIsSet;

@end

@interface AromaService_RegisterHealthCheckResponse : NSObject <TBase, NSCoding> {
  NSString * __message;
  NSString * __healthCheckToken;

  BOOL __message_isset;
  BOOL __healthCheckToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=healthCheckToken, setter=setHealthCheckToken:) NSString * healthCheckToken;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message healthCheckToken: (NSString *) healthCheckToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (NSString *) healthCheckToken;
- (void) setHealthCheckToken: (NSString *) healthCheckToken;
#endif
- (BOOL) healthCheckTokenIsSet;

@end

@interface AromaService_GetServiceAnnouncementsRequest : NSObject <TBase, NSCoding> {
  AromaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) AromaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (AromaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaService_UserToken) token;
- (void) setToken: (AromaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface AromaService_GetServiceAnnouncementsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __serviceAnnouncements;

  BOOL __serviceAnnouncements_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=serviceAnnouncements, setter=setServiceAnnouncements:) NSMutableArray * serviceAnnouncements;
#endif

- (id) init;
- (id) initWithServiceAnnouncements: (NSMutableArray *) serviceAnnouncements;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) serviceAnnouncements;
- (void) setServiceAnnouncements: (NSMutableArray *) serviceAnnouncements;
#endif
- (BOOL) serviceAnnouncementsIsSet;

@end

@protocol AromaService_AromaService <NSObject>
- (AromaService_SignInResponse *) signIn: (AromaService_SignInRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidCredentialsException, AromaService_UserDoesNotExistException, TException
- (AromaService_SignUpResponse *) signUp: (AromaService_SignUpRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidCredentialsException, AromaService_AccountAlreadyExistsException, TException
- (AromaService_GetUserInfoResponse *) getUserInfo: (AromaService_GetUserInfoRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, AromaService_UserDoesNotExistException, TException
- (AromaService_GetApplicationInfoResponse *) getApplicationInfo: (AromaService_GetApplicationInfoRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_GetApplicationsOwnedByResponse *) getApplicationsOwnedBy: (AromaService_GetApplicationsOwnedByRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, TException
- (AromaService_ProvisionApplicationResponse *) provisionApplication: (AromaService_ProvisionApplicationRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_RecreateApplicationTokenResponse *) recreateToken: (AromaService_RecreateApplicationTokenRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_DeleteApplicationResponse *) deleteApplication: (AromaService_DeleteApplicationRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_RenewApplicationTokenResponse *) renewApplicationToken: (AromaService_RenewApplicationTokenRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_UpdateApplicationResponse *) updateApplication: (AromaService_UpdateApplicationRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_SearchForApplicationsResponse *) searchForApplications: (AromaService_SearchForApplicationsRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, TException
- (AromaService_GetApplicationMessagesResponse *) getApplicationMessages: (AromaService_GetApplicationMessagesRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, AromaService_ApplicationDoesNotExistException, TException
- (AromaService_GetFullMessageResponse *) getFullMessage: (AromaService_GetFullMessageRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, TException
- (AromaService_DeleteMessageResponse *) deleteMessage: (AromaService_DeleteMessageRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_MessageDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_DismissMessageResponse *) dismissMessage: (AromaService_DismissMessageRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_MessageDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_GetInboxResponse *) getInbox: (AromaService_GetInboxRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, TException
- (AromaService_GetActivityResponse *) getActivity: (AromaService_GetActivityRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, TException
- (AromaService_GetReactionsResponse *) getReactions: (AromaService_GetReactionsRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_UpdateReactionsResponse *) updateReactions: (AromaService_UpdateReactionsRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_GetApplicationsFollowedByResponse *) getApplicationsFollowedBy: (AromaService_GetApplicationsFollowedByRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, TException
- (AromaService_FollowApplicationResponse *) followApplication: (AromaService_FollowApplicationRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_UnfollowApplicationResponse *) unfollowApplication: (AromaService_UnfollowApplicationRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_CheckIfDeviceIsRegisteredResponse *) checkIfDeviceIsRegistered: (AromaService_CheckIfDeviceIsRegisteredRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, TException
- (AromaService_GetRegisteredDevicesResponse *) getRegisteredDevices: (AromaService_GetRegisteredDevicesRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, TException
- (AromaService_RegisterDeviceResponse *) registerDevice: (AromaService_RegisterDeviceRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, TException
- (AromaService_UnregisterDeviceResponse *) unregisterDevice: (AromaService_UnregisterDeviceRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_UnauthorizedException, TException
- (AromaService_GetDashboardResponse *) getDashboard: (AromaService_GetDashboardRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, TException
- (AromaService_GetBuzzResponse *) getBuzz: (AromaService_GetBuzzRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (double) getApiVersion;  // throws TException
- (AromaService_RegisterHealthCheckResponse *) registerHealthCheck: (AromaService_RegisterHealthCheckRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_ApplicationDoesNotExistException, AromaService_UnauthorizedException, TException
- (AromaService_GetMediaResponse *) getMedia: (AromaService_GetMediaRequest *) request;  // throws AromaService_OperationFailedException, AromaService_InvalidArgumentException, AromaService_InvalidTokenException, AromaService_DoesNotExistException, AromaService_UnauthorizedException, TException
@end

@interface AromaService_AromaServiceClient : TBaseClient <AromaService_AromaService> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface AromaService_AromaServiceProcessor : NSObject <TProcessor> {
  id <AromaService_AromaService> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithAromaService: (id <AromaService_AromaService>) service;
- (id<AromaService_AromaService>) service;
@end

@interface AromaService_AromaServiceConstants : NSObject {
}
+ (AromaService_int) SERVICE_PORT;
+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT;
+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT;
+ (Aroma_Dimension *) MAX_PROFILE_IMAGE_DIMENSION;
+ (AromaService_int) MAX_PROFILE_PICTURE_SIZE_IN_KILOBYTES;
+ (Aroma_LengthOfTime *) DEFAULT_APP_TOKEN_LIFETIME;
+ (Aroma_Dimension *) MAX_APPLICATION_ICON_DIMENSION;
+ (AromaService_int) MAX_APPLICATION_ICON_SIZE_IN_KILOBYTES;
+ (AromaService_int) APPLICATION_NAME_MAX_LENGTH;
+ (AromaService_int) APPLICATION_MAX_OWNERS;
+ (AromaService_int) MAX_MESSAGE_LENGTH;
+ (Aroma_LengthOfTime *) DEFAULT_INBOX_LIFETIME;
+ (Aroma_LengthOfTime *) DEFAULT_ACTIVITY_LIFETIME;
+ (AromaService_int) MAXIMUM_REACTIONS;
@end

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Aroma.h"
#import "Endpoint.h"
#import "Exceptions.h"

#import "Channels.h"

@implementation AromaChannels_IOSDevice

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceToken: (NSData *) deviceToken
{
  self = [super init];
  __deviceToken = [deviceToken retain_stub];
  __deviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceToken"])
  {
    __deviceToken = [[decoder decodeObjectForKey: @"deviceToken"] retain_stub];
    __deviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceToken_isset)
  {
    [encoder encodeObject: __deviceToken forKey: @"deviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deviceToken_isset ? 2654435761 : 0;
  if (__deviceToken_isset)
  {
    hash = (hash * 31) ^ [__deviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_IOSDevice class]]) {
    return NO;
  }
  AromaChannels_IOSDevice *other = (AromaChannels_IOSDevice *)anObject;
  if ((__deviceToken_isset != other->__deviceToken_isset) ||
      (__deviceToken_isset && ((__deviceToken || other->__deviceToken) && ![__deviceToken isEqual:other->__deviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__deviceToken release_stub];
  [super dealloc_stub];
}

- (NSData *) deviceToken {
  return [[__deviceToken retain_stub] autorelease_stub];
}

- (void) setDeviceToken: (NSData *) deviceToken {
  [deviceToken retain_stub];
  [__deviceToken release_stub];
  __deviceToken = deviceToken;
  __deviceToken_isset = YES;
}

- (BOOL) deviceTokenIsSet {
  return __deviceToken_isset;
}

- (void) unsetDeviceToken {
  [__deviceToken release_stub];
  __deviceToken = nil;
  __deviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDeviceToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IOSDevice"];
  if (__deviceToken_isset) {
    if (__deviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __deviceToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_IOSDevice("];
  [ms appendString: @"deviceToken:"];
  [ms appendFormat: @"\"%@\"", __deviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_AndroidDevice

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegistrationId: (NSString *) registrationId
{
  self = [super init];
  __registrationId = [registrationId retain_stub];
  __registrationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"registrationId"])
  {
    __registrationId = [[decoder decodeObjectForKey: @"registrationId"] retain_stub];
    __registrationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__registrationId_isset)
  {
    [encoder encodeObject: __registrationId forKey: @"registrationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __registrationId_isset ? 2654435761 : 0;
  if (__registrationId_isset)
  {
    hash = (hash * 31) ^ [__registrationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_AndroidDevice class]]) {
    return NO;
  }
  AromaChannels_AndroidDevice *other = (AromaChannels_AndroidDevice *)anObject;
  if ((__registrationId_isset != other->__registrationId_isset) ||
      (__registrationId_isset && ((__registrationId || other->__registrationId) && ![__registrationId isEqual:other->__registrationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__registrationId release_stub];
  [super dealloc_stub];
}

- (NSString *) registrationId {
  return [[__registrationId retain_stub] autorelease_stub];
}

- (void) setRegistrationId: (NSString *) registrationId {
  [registrationId retain_stub];
  [__registrationId release_stub];
  __registrationId = registrationId;
  __registrationId_isset = YES;
}

- (BOOL) registrationIdIsSet {
  return __registrationId_isset;
}

- (void) unsetRegistrationId {
  [__registrationId release_stub];
  __registrationId = nil;
  __registrationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegistrationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AndroidDevice"];
  if (__registrationId_isset) {
    if (__registrationId != nil) {
      [outProtocol writeFieldBeginWithName: @"registrationId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __registrationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_AndroidDevice("];
  [ms appendString: @"registrationId:"];
  [ms appendFormat: @"\"%@\"", __registrationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_WindowsPhoneDevice

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_WindowsPhoneDevice class]]) {
    return NO;
  }
  AromaChannels_WindowsPhoneDevice *other = (AromaChannels_WindowsPhoneDevice *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"WindowsPhoneDevice"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_WindowsPhoneDevice("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_MobileDevice

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIosDevice: (AromaChannels_IOSDevice *) iosDevice androidDevice: (AromaChannels_AndroidDevice *) androidDevice windowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice
{
  self = [super init];
  __iosDevice = [iosDevice retain_stub];
  __iosDevice_isset = YES;
  __androidDevice = [androidDevice retain_stub];
  __androidDevice_isset = YES;
  __windowsPhoneDevice = [windowsPhoneDevice retain_stub];
  __windowsPhoneDevice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iosDevice"])
  {
    __iosDevice = [[decoder decodeObjectForKey: @"iosDevice"] retain_stub];
    __iosDevice_isset = YES;
  }
  if ([decoder containsValueForKey: @"androidDevice"])
  {
    __androidDevice = [[decoder decodeObjectForKey: @"androidDevice"] retain_stub];
    __androidDevice_isset = YES;
  }
  if ([decoder containsValueForKey: @"windowsPhoneDevice"])
  {
    __windowsPhoneDevice = [[decoder decodeObjectForKey: @"windowsPhoneDevice"] retain_stub];
    __windowsPhoneDevice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iosDevice_isset)
  {
    [encoder encodeObject: __iosDevice forKey: @"iosDevice"];
  }
  if (__androidDevice_isset)
  {
    [encoder encodeObject: __androidDevice forKey: @"androidDevice"];
  }
  if (__windowsPhoneDevice_isset)
  {
    [encoder encodeObject: __windowsPhoneDevice forKey: @"windowsPhoneDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __iosDevice_isset ? 2654435761 : 0;
  if (__iosDevice_isset)
  {
    hash = (hash * 31) ^ [__iosDevice hash];
  }
  hash = (hash * 31) ^ __androidDevice_isset ? 2654435761 : 0;
  if (__androidDevice_isset)
  {
    hash = (hash * 31) ^ [__androidDevice hash];
  }
  hash = (hash * 31) ^ __windowsPhoneDevice_isset ? 2654435761 : 0;
  if (__windowsPhoneDevice_isset)
  {
    hash = (hash * 31) ^ [__windowsPhoneDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_MobileDevice class]]) {
    return NO;
  }
  AromaChannels_MobileDevice *other = (AromaChannels_MobileDevice *)anObject;
  if ((__iosDevice_isset != other->__iosDevice_isset) ||
      (__iosDevice_isset && ((__iosDevice || other->__iosDevice) && ![__iosDevice isEqual:other->__iosDevice]))) {
    return NO;
  }
  if ((__androidDevice_isset != other->__androidDevice_isset) ||
      (__androidDevice_isset && ((__androidDevice || other->__androidDevice) && ![__androidDevice isEqual:other->__androidDevice]))) {
    return NO;
  }
  if ((__windowsPhoneDevice_isset != other->__windowsPhoneDevice_isset) ||
      (__windowsPhoneDevice_isset && ((__windowsPhoneDevice || other->__windowsPhoneDevice) && ![__windowsPhoneDevice isEqual:other->__windowsPhoneDevice]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__iosDevice release_stub];
  [__androidDevice release_stub];
  [__windowsPhoneDevice release_stub];
  [super dealloc_stub];
}

- (AromaChannels_IOSDevice *) iosDevice {
  return [[__iosDevice retain_stub] autorelease_stub];
}

- (void) setIosDevice: (AromaChannels_IOSDevice *) iosDevice {
  [iosDevice retain_stub];
  [__iosDevice release_stub];
  __iosDevice = iosDevice;
  __iosDevice_isset = YES;
}

- (BOOL) iosDeviceIsSet {
  return __iosDevice_isset;
}

- (void) unsetIosDevice {
  [__iosDevice release_stub];
  __iosDevice = nil;
  __iosDevice_isset = NO;
}

- (AromaChannels_AndroidDevice *) androidDevice {
  return [[__androidDevice retain_stub] autorelease_stub];
}

- (void) setAndroidDevice: (AromaChannels_AndroidDevice *) androidDevice {
  [androidDevice retain_stub];
  [__androidDevice release_stub];
  __androidDevice = androidDevice;
  __androidDevice_isset = YES;
}

- (BOOL) androidDeviceIsSet {
  return __androidDevice_isset;
}

- (void) unsetAndroidDevice {
  [__androidDevice release_stub];
  __androidDevice = nil;
  __androidDevice_isset = NO;
}

- (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice {
  return [[__windowsPhoneDevice retain_stub] autorelease_stub];
}

- (void) setWindowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice {
  [windowsPhoneDevice retain_stub];
  [__windowsPhoneDevice release_stub];
  __windowsPhoneDevice = windowsPhoneDevice;
  __windowsPhoneDevice_isset = YES;
}

- (BOOL) windowsPhoneDeviceIsSet {
  return __windowsPhoneDevice_isset;
}

- (void) unsetWindowsPhoneDevice {
  [__windowsPhoneDevice release_stub];
  __windowsPhoneDevice = nil;
  __windowsPhoneDevice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaChannels_IOSDevice *fieldValue = [[AromaChannels_IOSDevice alloc] init];
          [fieldValue read: inProtocol];
          [self setIosDevice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaChannels_AndroidDevice *fieldValue = [[AromaChannels_AndroidDevice alloc] init];
          [fieldValue read: inProtocol];
          [self setAndroidDevice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaChannels_WindowsPhoneDevice *fieldValue = [[AromaChannels_WindowsPhoneDevice alloc] init];
          [fieldValue read: inProtocol];
          [self setWindowsPhoneDevice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MobileDevice"];
  if (__iosDevice_isset) {
    if (__iosDevice != nil) {
      [outProtocol writeFieldBeginWithName: @"iosDevice" type: TType_STRUCT fieldID: 1];
      [__iosDevice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__androidDevice_isset) {
    if (__androidDevice != nil) {
      [outProtocol writeFieldBeginWithName: @"androidDevice" type: TType_STRUCT fieldID: 2];
      [__androidDevice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__windowsPhoneDevice_isset) {
    if (__windowsPhoneDevice != nil) {
      [outProtocol writeFieldBeginWithName: @"windowsPhoneDevice" type: TType_STRUCT fieldID: 3];
      [__windowsPhoneDevice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_MobileDevice("];
  [ms appendString: @"iosDevice:"];
  [ms appendFormat: @"%@", __iosDevice];
  [ms appendString: @",androidDevice:"];
  [ms appendFormat: @"%@", __androidDevice];
  [ms appendString: @",windowsPhoneDevice:"];
  [ms appendFormat: @"%@", __windowsPhoneDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_PushNotificationPayload

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessageId: (AromaChannels_uuid) messageId applicationId: (AromaChannels_uuid) applicationId
{
  self = [super init];
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_PushNotificationPayload class]]) {
    return NO;
  }
  AromaChannels_PushNotificationPayload *other = (AromaChannels_PushNotificationPayload *)anObject;
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__messageId release_stub];
  [__applicationId release_stub];
  [super dealloc_stub];
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PushNotificationPayload"];
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_PushNotificationPayload("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_SlackChannel

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDomainName: (NSString *) domainName channelName: (NSString *) channelName slackToken: (NSString *) slackToken
{
  self = [super init];
  __domainName = [domainName retain_stub];
  __domainName_isset = YES;
  __channelName = [channelName retain_stub];
  __channelName_isset = YES;
  __slackToken = [slackToken retain_stub];
  __slackToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"domainName"])
  {
    __domainName = [[decoder decodeObjectForKey: @"domainName"] retain_stub];
    __domainName_isset = YES;
  }
  if ([decoder containsValueForKey: @"channelName"])
  {
    __channelName = [[decoder decodeObjectForKey: @"channelName"] retain_stub];
    __channelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"slackToken"])
  {
    __slackToken = [[decoder decodeObjectForKey: @"slackToken"] retain_stub];
    __slackToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__domainName_isset)
  {
    [encoder encodeObject: __domainName forKey: @"domainName"];
  }
  if (__channelName_isset)
  {
    [encoder encodeObject: __channelName forKey: @"channelName"];
  }
  if (__slackToken_isset)
  {
    [encoder encodeObject: __slackToken forKey: @"slackToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __domainName_isset ? 2654435761 : 0;
  if (__domainName_isset)
  {
    hash = (hash * 31) ^ [__domainName hash];
  }
  hash = (hash * 31) ^ __channelName_isset ? 2654435761 : 0;
  if (__channelName_isset)
  {
    hash = (hash * 31) ^ [__channelName hash];
  }
  hash = (hash * 31) ^ __slackToken_isset ? 2654435761 : 0;
  if (__slackToken_isset)
  {
    hash = (hash * 31) ^ [__slackToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_SlackChannel class]]) {
    return NO;
  }
  AromaChannels_SlackChannel *other = (AromaChannels_SlackChannel *)anObject;
  if ((__domainName_isset != other->__domainName_isset) ||
      (__domainName_isset && ((__domainName || other->__domainName) && ![__domainName isEqual:other->__domainName]))) {
    return NO;
  }
  if ((__channelName_isset != other->__channelName_isset) ||
      (__channelName_isset && ((__channelName || other->__channelName) && ![__channelName isEqual:other->__channelName]))) {
    return NO;
  }
  if ((__slackToken_isset != other->__slackToken_isset) ||
      (__slackToken_isset && ((__slackToken || other->__slackToken) && ![__slackToken isEqual:other->__slackToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__domainName release_stub];
  [__channelName release_stub];
  [__slackToken release_stub];
  [super dealloc_stub];
}

- (NSString *) domainName {
  return [[__domainName retain_stub] autorelease_stub];
}

- (void) setDomainName: (NSString *) domainName {
  [domainName retain_stub];
  [__domainName release_stub];
  __domainName = domainName;
  __domainName_isset = YES;
}

- (BOOL) domainNameIsSet {
  return __domainName_isset;
}

- (void) unsetDomainName {
  [__domainName release_stub];
  __domainName = nil;
  __domainName_isset = NO;
}

- (NSString *) channelName {
  return [[__channelName retain_stub] autorelease_stub];
}

- (void) setChannelName: (NSString *) channelName {
  [channelName retain_stub];
  [__channelName release_stub];
  __channelName = channelName;
  __channelName_isset = YES;
}

- (BOOL) channelNameIsSet {
  return __channelName_isset;
}

- (void) unsetChannelName {
  [__channelName release_stub];
  __channelName = nil;
  __channelName_isset = NO;
}

- (NSString *) slackToken {
  return [[__slackToken retain_stub] autorelease_stub];
}

- (void) setSlackToken: (NSString *) slackToken {
  [slackToken retain_stub];
  [__slackToken release_stub];
  __slackToken = slackToken;
  __slackToken_isset = YES;
}

- (BOOL) slackTokenIsSet {
  return __slackToken_isset;
}

- (void) unsetSlackToken {
  [__slackToken release_stub];
  __slackToken = nil;
  __slackToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomainName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChannelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSlackToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SlackChannel"];
  if (__domainName_isset) {
    if (__domainName != nil) {
      [outProtocol writeFieldBeginWithName: @"domainName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __domainName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channelName_isset) {
    if (__channelName != nil) {
      [outProtocol writeFieldBeginWithName: @"channelName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __channelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__slackToken_isset) {
    if (__slackToken != nil) {
      [outProtocol writeFieldBeginWithName: @"slackToken" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __slackToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_SlackChannel("];
  [ms appendString: @"domainName:"];
  [ms appendFormat: @"\"%@\"", __domainName];
  [ms appendString: @",channelName:"];
  [ms appendFormat: @"\"%@\"", __channelName];
  [ms appendString: @",slackToken:"];
  [ms appendFormat: @"\"%@\"", __slackToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_SlackUsername

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDomainName: (NSString *) domainName username: (NSString *) username slackToken: (NSString *) slackToken
{
  self = [super init];
  __domainName = [domainName retain_stub];
  __domainName_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __slackToken = [slackToken retain_stub];
  __slackToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"domainName"])
  {
    __domainName = [[decoder decodeObjectForKey: @"domainName"] retain_stub];
    __domainName_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"slackToken"])
  {
    __slackToken = [[decoder decodeObjectForKey: @"slackToken"] retain_stub];
    __slackToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__domainName_isset)
  {
    [encoder encodeObject: __domainName forKey: @"domainName"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__slackToken_isset)
  {
    [encoder encodeObject: __slackToken forKey: @"slackToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __domainName_isset ? 2654435761 : 0;
  if (__domainName_isset)
  {
    hash = (hash * 31) ^ [__domainName hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __slackToken_isset ? 2654435761 : 0;
  if (__slackToken_isset)
  {
    hash = (hash * 31) ^ [__slackToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_SlackUsername class]]) {
    return NO;
  }
  AromaChannels_SlackUsername *other = (AromaChannels_SlackUsername *)anObject;
  if ((__domainName_isset != other->__domainName_isset) ||
      (__domainName_isset && ((__domainName || other->__domainName) && ![__domainName isEqual:other->__domainName]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__slackToken_isset != other->__slackToken_isset) ||
      (__slackToken_isset && ((__slackToken || other->__slackToken) && ![__slackToken isEqual:other->__slackToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__domainName release_stub];
  [__username release_stub];
  [__slackToken release_stub];
  [super dealloc_stub];
}

- (NSString *) domainName {
  return [[__domainName retain_stub] autorelease_stub];
}

- (void) setDomainName: (NSString *) domainName {
  [domainName retain_stub];
  [__domainName release_stub];
  __domainName = domainName;
  __domainName_isset = YES;
}

- (BOOL) domainNameIsSet {
  return __domainName_isset;
}

- (void) unsetDomainName {
  [__domainName release_stub];
  __domainName = nil;
  __domainName_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) slackToken {
  return [[__slackToken retain_stub] autorelease_stub];
}

- (void) setSlackToken: (NSString *) slackToken {
  [slackToken retain_stub];
  [__slackToken release_stub];
  __slackToken = slackToken;
  __slackToken_isset = YES;
}

- (BOOL) slackTokenIsSet {
  return __slackToken_isset;
}

- (void) unsetSlackToken {
  [__slackToken release_stub];
  __slackToken = nil;
  __slackToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomainName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSlackToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SlackUsername"];
  if (__domainName_isset) {
    if (__domainName != nil) {
      [outProtocol writeFieldBeginWithName: @"domainName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __domainName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__slackToken_isset) {
    if (__slackToken != nil) {
      [outProtocol writeFieldBeginWithName: @"slackToken" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __slackToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_SlackUsername("];
  [ms appendString: @"domainName:"];
  [ms appendFormat: @"\"%@\"", __domainName];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",slackToken:"];
  [ms appendFormat: @"\"%@\"", __slackToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_Email

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.subject = @"Aroma - New Message";

#endif
  return self;
}

- (id) initWithEmailAddress: (NSString *) emailAddress subject: (NSString *) subject
{
  self = [super init];
  __emailAddress = [emailAddress retain_stub];
  __emailAddress_isset = YES;
  __subject = [subject retain_stub];
  __subject_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"emailAddress"])
  {
    __emailAddress = [[decoder decodeObjectForKey: @"emailAddress"] retain_stub];
    __emailAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"subject"])
  {
    __subject = [[decoder decodeObjectForKey: @"subject"] retain_stub];
    __subject_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__emailAddress_isset)
  {
    [encoder encodeObject: __emailAddress forKey: @"emailAddress"];
  }
  if (__subject_isset)
  {
    [encoder encodeObject: __subject forKey: @"subject"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __emailAddress_isset ? 2654435761 : 0;
  if (__emailAddress_isset)
  {
    hash = (hash * 31) ^ [__emailAddress hash];
  }
  hash = (hash * 31) ^ __subject_isset ? 2654435761 : 0;
  if (__subject_isset)
  {
    hash = (hash * 31) ^ [__subject hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_Email class]]) {
    return NO;
  }
  AromaChannels_Email *other = (AromaChannels_Email *)anObject;
  if ((__emailAddress_isset != other->__emailAddress_isset) ||
      (__emailAddress_isset && ((__emailAddress || other->__emailAddress) && ![__emailAddress isEqual:other->__emailAddress]))) {
    return NO;
  }
  if ((__subject_isset != other->__subject_isset) ||
      (__subject_isset && ((__subject || other->__subject) && ![__subject isEqual:other->__subject]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__emailAddress release_stub];
  [__subject release_stub];
  [super dealloc_stub];
}

- (NSString *) emailAddress {
  return [[__emailAddress retain_stub] autorelease_stub];
}

- (void) setEmailAddress: (NSString *) emailAddress {
  [emailAddress retain_stub];
  [__emailAddress release_stub];
  __emailAddress = emailAddress;
  __emailAddress_isset = YES;
}

- (BOOL) emailAddressIsSet {
  return __emailAddress_isset;
}

- (void) unsetEmailAddress {
  [__emailAddress release_stub];
  __emailAddress = nil;
  __emailAddress_isset = NO;
}

- (NSString *) subject {
  return [[__subject retain_stub] autorelease_stub];
}

- (void) setSubject: (NSString *) subject {
  [subject retain_stub];
  [__subject release_stub];
  __subject = subject;
  __subject_isset = YES;
}

- (BOOL) subjectIsSet {
  return __subject_isset;
}

- (void) unsetSubject {
  [__subject release_stub];
  __subject = nil;
  __subject_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmailAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubject: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Email"];
  if (__emailAddress_isset) {
    if (__emailAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"emailAddress" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __emailAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__subject_isset) {
    if (__subject != nil) {
      [outProtocol writeFieldBeginWithName: @"subject" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __subject];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_Email("];
  [ms appendString: @"emailAddress:"];
  [ms appendFormat: @"\"%@\"", __emailAddress];
  [ms appendString: @",subject:"];
  [ms appendFormat: @"\"%@\"", __subject];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_CustomChannel

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEndpoint: (AromaEndpoint_Endpoint *) endpoint
{
  self = [super init];
  __endpoint = [endpoint retain_stub];
  __endpoint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"endpoint"])
  {
    __endpoint = [[decoder decodeObjectForKey: @"endpoint"] retain_stub];
    __endpoint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__endpoint_isset)
  {
    [encoder encodeObject: __endpoint forKey: @"endpoint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __endpoint_isset ? 2654435761 : 0;
  if (__endpoint_isset)
  {
    hash = (hash * 31) ^ [__endpoint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_CustomChannel class]]) {
    return NO;
  }
  AromaChannels_CustomChannel *other = (AromaChannels_CustomChannel *)anObject;
  if ((__endpoint_isset != other->__endpoint_isset) ||
      (__endpoint_isset && ((__endpoint || other->__endpoint) && ![__endpoint isEqual:other->__endpoint]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__endpoint release_stub];
  [super dealloc_stub];
}

- (AromaEndpoint_Endpoint *) endpoint {
  return [[__endpoint retain_stub] autorelease_stub];
}

- (void) setEndpoint: (AromaEndpoint_Endpoint *) endpoint {
  [endpoint retain_stub];
  [__endpoint release_stub];
  __endpoint = endpoint;
  __endpoint_isset = YES;
}

- (BOOL) endpointIsSet {
  return __endpoint_isset;
}

- (void) unsetEndpoint {
  [__endpoint release_stub];
  __endpoint = nil;
  __endpoint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaEndpoint_Endpoint *fieldValue = [[AromaEndpoint_Endpoint alloc] init];
          [fieldValue read: inProtocol];
          [self setEndpoint: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CustomChannel"];
  if (__endpoint_isset) {
    if (__endpoint != nil) {
      [outProtocol writeFieldBeginWithName: @"endpoint" type: TType_STRUCT fieldID: 1];
      [__endpoint write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_CustomChannel("];
  [ms appendString: @"endpoint:"];
  [ms appendFormat: @"%@", __endpoint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_AromaChannel

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSlackChannel: (AromaChannels_SlackChannel *) slackChannel slackUsername: (AromaChannels_SlackUsername *) slackUsername email: (AromaChannels_Email *) email customChannel: (AromaChannels_CustomChannel *) customChannel iosDevice: (AromaChannels_IOSDevice *) iosDevice androidDevice: (AromaChannels_AndroidDevice *) androidDevice windowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice
{
  self = [super init];
  __slackChannel = [slackChannel retain_stub];
  __slackChannel_isset = YES;
  __slackUsername = [slackUsername retain_stub];
  __slackUsername_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __customChannel = [customChannel retain_stub];
  __customChannel_isset = YES;
  __iosDevice = [iosDevice retain_stub];
  __iosDevice_isset = YES;
  __androidDevice = [androidDevice retain_stub];
  __androidDevice_isset = YES;
  __windowsPhoneDevice = [windowsPhoneDevice retain_stub];
  __windowsPhoneDevice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"slackChannel"])
  {
    __slackChannel = [[decoder decodeObjectForKey: @"slackChannel"] retain_stub];
    __slackChannel_isset = YES;
  }
  if ([decoder containsValueForKey: @"slackUsername"])
  {
    __slackUsername = [[decoder decodeObjectForKey: @"slackUsername"] retain_stub];
    __slackUsername_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"customChannel"])
  {
    __customChannel = [[decoder decodeObjectForKey: @"customChannel"] retain_stub];
    __customChannel_isset = YES;
  }
  if ([decoder containsValueForKey: @"iosDevice"])
  {
    __iosDevice = [[decoder decodeObjectForKey: @"iosDevice"] retain_stub];
    __iosDevice_isset = YES;
  }
  if ([decoder containsValueForKey: @"androidDevice"])
  {
    __androidDevice = [[decoder decodeObjectForKey: @"androidDevice"] retain_stub];
    __androidDevice_isset = YES;
  }
  if ([decoder containsValueForKey: @"windowsPhoneDevice"])
  {
    __windowsPhoneDevice = [[decoder decodeObjectForKey: @"windowsPhoneDevice"] retain_stub];
    __windowsPhoneDevice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__slackChannel_isset)
  {
    [encoder encodeObject: __slackChannel forKey: @"slackChannel"];
  }
  if (__slackUsername_isset)
  {
    [encoder encodeObject: __slackUsername forKey: @"slackUsername"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__customChannel_isset)
  {
    [encoder encodeObject: __customChannel forKey: @"customChannel"];
  }
  if (__iosDevice_isset)
  {
    [encoder encodeObject: __iosDevice forKey: @"iosDevice"];
  }
  if (__androidDevice_isset)
  {
    [encoder encodeObject: __androidDevice forKey: @"androidDevice"];
  }
  if (__windowsPhoneDevice_isset)
  {
    [encoder encodeObject: __windowsPhoneDevice forKey: @"windowsPhoneDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __slackChannel_isset ? 2654435761 : 0;
  if (__slackChannel_isset)
  {
    hash = (hash * 31) ^ [__slackChannel hash];
  }
  hash = (hash * 31) ^ __slackUsername_isset ? 2654435761 : 0;
  if (__slackUsername_isset)
  {
    hash = (hash * 31) ^ [__slackUsername hash];
  }
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __customChannel_isset ? 2654435761 : 0;
  if (__customChannel_isset)
  {
    hash = (hash * 31) ^ [__customChannel hash];
  }
  hash = (hash * 31) ^ __iosDevice_isset ? 2654435761 : 0;
  if (__iosDevice_isset)
  {
    hash = (hash * 31) ^ [__iosDevice hash];
  }
  hash = (hash * 31) ^ __androidDevice_isset ? 2654435761 : 0;
  if (__androidDevice_isset)
  {
    hash = (hash * 31) ^ [__androidDevice hash];
  }
  hash = (hash * 31) ^ __windowsPhoneDevice_isset ? 2654435761 : 0;
  if (__windowsPhoneDevice_isset)
  {
    hash = (hash * 31) ^ [__windowsPhoneDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_AromaChannel class]]) {
    return NO;
  }
  AromaChannels_AromaChannel *other = (AromaChannels_AromaChannel *)anObject;
  if ((__slackChannel_isset != other->__slackChannel_isset) ||
      (__slackChannel_isset && ((__slackChannel || other->__slackChannel) && ![__slackChannel isEqual:other->__slackChannel]))) {
    return NO;
  }
  if ((__slackUsername_isset != other->__slackUsername_isset) ||
      (__slackUsername_isset && ((__slackUsername || other->__slackUsername) && ![__slackUsername isEqual:other->__slackUsername]))) {
    return NO;
  }
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__customChannel_isset != other->__customChannel_isset) ||
      (__customChannel_isset && ((__customChannel || other->__customChannel) && ![__customChannel isEqual:other->__customChannel]))) {
    return NO;
  }
  if ((__iosDevice_isset != other->__iosDevice_isset) ||
      (__iosDevice_isset && ((__iosDevice || other->__iosDevice) && ![__iosDevice isEqual:other->__iosDevice]))) {
    return NO;
  }
  if ((__androidDevice_isset != other->__androidDevice_isset) ||
      (__androidDevice_isset && ((__androidDevice || other->__androidDevice) && ![__androidDevice isEqual:other->__androidDevice]))) {
    return NO;
  }
  if ((__windowsPhoneDevice_isset != other->__windowsPhoneDevice_isset) ||
      (__windowsPhoneDevice_isset && ((__windowsPhoneDevice || other->__windowsPhoneDevice) && ![__windowsPhoneDevice isEqual:other->__windowsPhoneDevice]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__slackChannel release_stub];
  [__slackUsername release_stub];
  [__email release_stub];
  [__customChannel release_stub];
  [__iosDevice release_stub];
  [__androidDevice release_stub];
  [__windowsPhoneDevice release_stub];
  [super dealloc_stub];
}

- (AromaChannels_SlackChannel *) slackChannel {
  return [[__slackChannel retain_stub] autorelease_stub];
}

- (void) setSlackChannel: (AromaChannels_SlackChannel *) slackChannel {
  [slackChannel retain_stub];
  [__slackChannel release_stub];
  __slackChannel = slackChannel;
  __slackChannel_isset = YES;
}

- (BOOL) slackChannelIsSet {
  return __slackChannel_isset;
}

- (void) unsetSlackChannel {
  [__slackChannel release_stub];
  __slackChannel = nil;
  __slackChannel_isset = NO;
}

- (AromaChannels_SlackUsername *) slackUsername {
  return [[__slackUsername retain_stub] autorelease_stub];
}

- (void) setSlackUsername: (AromaChannels_SlackUsername *) slackUsername {
  [slackUsername retain_stub];
  [__slackUsername release_stub];
  __slackUsername = slackUsername;
  __slackUsername_isset = YES;
}

- (BOOL) slackUsernameIsSet {
  return __slackUsername_isset;
}

- (void) unsetSlackUsername {
  [__slackUsername release_stub];
  __slackUsername = nil;
  __slackUsername_isset = NO;
}

- (AromaChannels_Email *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (AromaChannels_Email *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (AromaChannels_CustomChannel *) customChannel {
  return [[__customChannel retain_stub] autorelease_stub];
}

- (void) setCustomChannel: (AromaChannels_CustomChannel *) customChannel {
  [customChannel retain_stub];
  [__customChannel release_stub];
  __customChannel = customChannel;
  __customChannel_isset = YES;
}

- (BOOL) customChannelIsSet {
  return __customChannel_isset;
}

- (void) unsetCustomChannel {
  [__customChannel release_stub];
  __customChannel = nil;
  __customChannel_isset = NO;
}

- (AromaChannels_IOSDevice *) iosDevice {
  return [[__iosDevice retain_stub] autorelease_stub];
}

- (void) setIosDevice: (AromaChannels_IOSDevice *) iosDevice {
  [iosDevice retain_stub];
  [__iosDevice release_stub];
  __iosDevice = iosDevice;
  __iosDevice_isset = YES;
}

- (BOOL) iosDeviceIsSet {
  return __iosDevice_isset;
}

- (void) unsetIosDevice {
  [__iosDevice release_stub];
  __iosDevice = nil;
  __iosDevice_isset = NO;
}

- (AromaChannels_AndroidDevice *) androidDevice {
  return [[__androidDevice retain_stub] autorelease_stub];
}

- (void) setAndroidDevice: (AromaChannels_AndroidDevice *) androidDevice {
  [androidDevice retain_stub];
  [__androidDevice release_stub];
  __androidDevice = androidDevice;
  __androidDevice_isset = YES;
}

- (BOOL) androidDeviceIsSet {
  return __androidDevice_isset;
}

- (void) unsetAndroidDevice {
  [__androidDevice release_stub];
  __androidDevice = nil;
  __androidDevice_isset = NO;
}

- (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice {
  return [[__windowsPhoneDevice retain_stub] autorelease_stub];
}

- (void) setWindowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice {
  [windowsPhoneDevice retain_stub];
  [__windowsPhoneDevice release_stub];
  __windowsPhoneDevice = windowsPhoneDevice;
  __windowsPhoneDevice_isset = YES;
}

- (BOOL) windowsPhoneDeviceIsSet {
  return __windowsPhoneDevice_isset;
}

- (void) unsetWindowsPhoneDevice {
  [__windowsPhoneDevice release_stub];
  __windowsPhoneDevice = nil;
  __windowsPhoneDevice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaChannels_SlackChannel *fieldValue = [[AromaChannels_SlackChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setSlackChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaChannels_SlackUsername *fieldValue = [[AromaChannels_SlackUsername alloc] init];
          [fieldValue read: inProtocol];
          [self setSlackUsername: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaChannels_Email *fieldValue = [[AromaChannels_Email alloc] init];
          [fieldValue read: inProtocol];
          [self setEmail: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          AromaChannels_CustomChannel *fieldValue = [[AromaChannels_CustomChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setCustomChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          AromaChannels_IOSDevice *fieldValue = [[AromaChannels_IOSDevice alloc] init];
          [fieldValue read: inProtocol];
          [self setIosDevice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          AromaChannels_AndroidDevice *fieldValue = [[AromaChannels_AndroidDevice alloc] init];
          [fieldValue read: inProtocol];
          [self setAndroidDevice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          AromaChannels_WindowsPhoneDevice *fieldValue = [[AromaChannels_WindowsPhoneDevice alloc] init];
          [fieldValue read: inProtocol];
          [self setWindowsPhoneDevice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AromaChannel"];
  if (__slackChannel_isset) {
    if (__slackChannel != nil) {
      [outProtocol writeFieldBeginWithName: @"slackChannel" type: TType_STRUCT fieldID: 1];
      [__slackChannel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__slackUsername_isset) {
    if (__slackUsername != nil) {
      [outProtocol writeFieldBeginWithName: @"slackUsername" type: TType_STRUCT fieldID: 2];
      [__slackUsername write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRUCT fieldID: 3];
      [__email write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__customChannel_isset) {
    if (__customChannel != nil) {
      [outProtocol writeFieldBeginWithName: @"customChannel" type: TType_STRUCT fieldID: 4];
      [__customChannel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iosDevice_isset) {
    if (__iosDevice != nil) {
      [outProtocol writeFieldBeginWithName: @"iosDevice" type: TType_STRUCT fieldID: 5];
      [__iosDevice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__androidDevice_isset) {
    if (__androidDevice != nil) {
      [outProtocol writeFieldBeginWithName: @"androidDevice" type: TType_STRUCT fieldID: 6];
      [__androidDevice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__windowsPhoneDevice_isset) {
    if (__windowsPhoneDevice != nil) {
      [outProtocol writeFieldBeginWithName: @"windowsPhoneDevice" type: TType_STRUCT fieldID: 7];
      [__windowsPhoneDevice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_AromaChannel("];
  [ms appendString: @"slackChannel:"];
  [ms appendFormat: @"%@", __slackChannel];
  [ms appendString: @",slackUsername:"];
  [ms appendFormat: @"%@", __slackUsername];
  [ms appendString: @",email:"];
  [ms appendFormat: @"%@", __email];
  [ms appendString: @",customChannel:"];
  [ms appendFormat: @"%@", __customChannel];
  [ms appendString: @",iosDevice:"];
  [ms appendFormat: @"%@", __iosDevice];
  [ms appendString: @",androidDevice:"];
  [ms appendFormat: @"%@", __androidDevice];
  [ms appendString: @",windowsPhoneDevice:"];
  [ms appendFormat: @"%@", __windowsPhoneDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_ChannelInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithChannel: (AromaChannels_AromaChannel *) channel timeRegistered: (AromaChannels_timestamp) timeRegistered channelId: (AromaChannels_uuid) channelId
{
  self = [super init];
  __channel = [channel retain_stub];
  __channel_isset = YES;
  __timeRegistered = timeRegistered;
  __timeRegistered_isset = YES;
  __channelId = [channelId retain_stub];
  __channelId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeRegistered"])
  {
    __timeRegistered = [decoder decodeInt64ForKey: @"timeRegistered"];
    __timeRegistered_isset = YES;
  }
  if ([decoder containsValueForKey: @"channelId"])
  {
    __channelId = [[decoder decodeObjectForKey: @"channelId"] retain_stub];
    __channelId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
  if (__timeRegistered_isset)
  {
    [encoder encodeInt64: __timeRegistered forKey: @"timeRegistered"];
  }
  if (__channelId_isset)
  {
    [encoder encodeObject: __channelId forKey: @"channelId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  hash = (hash * 31) ^ __timeRegistered_isset ? 2654435761 : 0;
  if (__timeRegistered_isset)
  {
    hash = (hash * 31) ^ [@(__timeRegistered) hash];
  }
  hash = (hash * 31) ^ __channelId_isset ? 2654435761 : 0;
  if (__channelId_isset)
  {
    hash = (hash * 31) ^ [__channelId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_ChannelInfo class]]) {
    return NO;
  }
  AromaChannels_ChannelInfo *other = (AromaChannels_ChannelInfo *)anObject;
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  if ((__timeRegistered_isset != other->__timeRegistered_isset) ||
      (__timeRegistered_isset && (__timeRegistered != other->__timeRegistered))) {
    return NO;
  }
  if ((__channelId_isset != other->__channelId_isset) ||
      (__channelId_isset && ((__channelId || other->__channelId) && ![__channelId isEqual:other->__channelId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__channel release_stub];
  [__channelId release_stub];
  [super dealloc_stub];
}

- (AromaChannels_AromaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (AromaChannels_AromaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (int64_t) timeRegistered {
  return __timeRegistered;
}

- (void) setTimeRegistered: (int64_t) timeRegistered {
  __timeRegistered = timeRegistered;
  __timeRegistered_isset = YES;
}

- (BOOL) timeRegisteredIsSet {
  return __timeRegistered_isset;
}

- (void) unsetTimeRegistered {
  __timeRegistered_isset = NO;
}

- (NSString *) channelId {
  return [[__channelId retain_stub] autorelease_stub];
}

- (void) setChannelId: (NSString *) channelId {
  [channelId retain_stub];
  [__channelId release_stub];
  __channelId = channelId;
  __channelId_isset = YES;
}

- (BOOL) channelIdIsSet {
  return __channelId_isset;
}

- (void) unsetChannelId {
  [__channelId release_stub];
  __channelId = nil;
  __channelId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaChannels_AromaChannel *fieldValue = [[AromaChannels_AromaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeRegistered: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChannelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChannelInfo"];
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 1];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeRegistered_isset) {
    [outProtocol writeFieldBeginWithName: @"timeRegistered" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timeRegistered];
    [outProtocol writeFieldEnd];
  }
  if (__channelId_isset) {
    if (__channelId != nil) {
      [outProtocol writeFieldBeginWithName: @"channelId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __channelId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_ChannelInfo("];
  [ms appendString: @"channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @",timeRegistered:"];
  [ms appendFormat: @"%qi", __timeRegistered];
  [ms appendString: @",channelId:"];
  [ms appendFormat: @"\"%@\"", __channelId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_ReceiveMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (Aroma_Message *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_ReceiveMessageRequest class]]) {
    return NO;
  }
  AromaChannels_ReceiveMessageRequest *other = (AromaChannels_ReceiveMessageRequest *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (Aroma_Message *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (Aroma_Message *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Aroma_Message *fieldValue = [[Aroma_Message alloc] init];
          [fieldValue read: inProtocol];
          [self setMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReceiveMessageRequest"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRUCT fieldID: 1];
      [__message write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_ReceiveMessageRequest("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"%@", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static NSString * AromaChannels_PUSH_NOTIFICATION_KEY_FOR_PAYLOAD = @"aroma.notification.payload";

@implementation AromaChannels_ChannelsConstants
+ (void) initialize {
}
+ (NSString *) PUSH_NOTIFICATION_KEY_FOR_PAYLOAD{
  return AromaChannels_PUSH_NOTIFICATION_KEY_FOR_PAYLOAD;
}
@end

@interface AromaChannels_ping_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation AromaChannels_ping_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_ping_args class]]) {
    return NO;
  }
  AromaChannels_ping_args *other = (AromaChannels_ping_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ping_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_ping_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaChannels_Ping_result : NSObject <TBase, NSCoding> {
  AromaChannels_int __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) AromaChannels_int success;
#endif

- (id) init;
- (id) initWithSuccess: (AromaChannels_int) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaChannels_int) success;
- (void) setSuccess: (AromaChannels_int) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AromaChannels_Ping_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AromaChannels_int) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_Ping_result class]]) {
    return NO;
  }
  AromaChannels_Ping_result *other = (AromaChannels_Ping_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_Ping_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaChannels_receiveMessage_args : NSObject <TBase, NSCoding> {
  AromaChannels_ReceiveMessageRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AromaChannels_ReceiveMessageRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AromaChannels_ReceiveMessageRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AromaChannels_ReceiveMessageRequest *) request;
- (void) setRequest: (AromaChannels_ReceiveMessageRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AromaChannels_receiveMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AromaChannels_ReceiveMessageRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_receiveMessage_args class]]) {
    return NO;
  }
  AromaChannels_receiveMessage_args *other = (AromaChannels_receiveMessage_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AromaChannels_ReceiveMessageRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AromaChannels_ReceiveMessageRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaChannels_ReceiveMessageRequest *fieldValue = [[AromaChannels_ReceiveMessageRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"receiveMessage_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_receiveMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_CustomAromaChannelClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_ping
{
  [outProtocol writeMessageBeginWithName: @"ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AromaChannels_int) recv_ping
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AromaChannels_Ping_result * result = [[[AromaChannels_Ping_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ping failed: unknown result"];
}

- (AromaChannels_int) ping
{
  [self send_ping];
  [[outProtocol transport] flush];
  return [self recv_ping];
}

- (void) send_receiveMessage: (AromaChannels_ReceiveMessageRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"receiveMessage" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"receiveMessage_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) receiveMessage: (AromaChannels_ReceiveMessageRequest *) request
{
  [self send_receiveMessage : request];
  [[outProtocol transport] flush];
}

@end

@implementation AromaChannels_CustomAromaChannelProcessor

- (id) initWithCustomAromaChannel: (id <AromaChannels_CustomAromaChannel>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"ping"];
}
{
  SEL s = @selector(process_receiveMessage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"receiveMessage"];
}
return self;
}

- (id<AromaChannels_CustomAromaChannel>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_ping_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AromaChannels_ping_args * args = [[AromaChannels_ping_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AromaChannels_Ping_result * result = [[AromaChannels_Ping_result alloc] init];
[result setSuccess: [mService ping]];
[outProtocol writeMessageBeginWithName: @"ping"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_receiveMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
AromaChannels_receiveMessage_args * args = [[AromaChannels_receiveMessage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService receiveMessage: [args request]];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

